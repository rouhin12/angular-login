const Autocomplete = {"metadata":{"allOf":[{"type":"object","properties":{"q":{"type":"string","examples":["Empire State Building"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Free-form query string to search for. Commas are optional, but improves performance by reducing the complexity of the search."},"countrycodes":{"type":"string","examples":["us,ca,gb"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit search results to a specific country or a comma-separated list of countries. Should be the ISO 3166-1 alpha-2 code(s)."},"tag":{"type":"string","examples":["place:city"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Restricts results to specific types of elements. This can be used to return only administrative areas - such as towns or cities - or specific Points of Interest such as schools or restaurants. \nThis is defined as key value pairs of `class` and `type` values based on OpenStreetMap''s (OSM) <a href=\"https://wiki.openstreetmap.org/wiki/Map_Features\" target=\"_blank\">exhaustive list</a>. \nMultiple `class` and `type` values can be specified as a comma-separated list.<br/><br/>\nExamples:<ul><li>To return only cities: `tag=place:city`</li><li>To return only types of `place`, such as Suburbs, Towns and Cities, use a wildcard: `tag=place:*`</li><li>To restrict results to specific types of `place`: `tag=place:city,place:town,place:village`</li><li>To restrict results to cafes: `tag=amenity:cafe`</ul> '"},"limit":{"type":"integer","minimum":1,"maximum":20,"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit the number of returned results. Accepted value: `1` to `20`. Defaults to `10`."},"viewbox":{"type":"string","examples":["-73.9965012,40.7489255,-73.9858166,40.7499585"],"$schema":"http://json-schema.org/draft-04/schema#","description":"The preferred area to find search results. Any two corner points of the box - `max_lon,max_lat,min_lon,min_lat` or `min_lon,min_lat,max_lon,max_lat` - are accepted in any order as long as they span a real box. To restrict results to those within the viewbox, use along with the `bounded` option."},"bounded":{"type":"integer","enum":[0,1],"$schema":"http://json-schema.org/draft-04/schema#","description":"Restrict result to items contained within the bounds specified in the `viewbox` parameter. Defaults to `0`."},"json_callback":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Wrap json output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats."},"normalizecity":{"type":"integer","enum":[0,1],"default":0,"description":"For responses with no `city` value in the address section, the next available element in this order - `city_district`, `locality`, `town`, `borough`, `municipality`, `village`, `hamlet`, `quarter`, `neighbourhood` - from the address section will be normalized to city. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"accept-language":{"type":"string","default":"en","examples":["en"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Preferred language order for showing search results, overrides the value specified in the `Accept-Language` HTTP header. Defaults to `en`. \n\nTo use native language for the response when available, use `accept-language=native`. \n\nEither uses standard <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\" target=\"_blank\">rfc2616 accept-language string</a> or a simple comma separated list of language codes."},"importancesort":{"type":"integer","enum":[0,1],"default":1,"description":"Determines whether results are sorted by their individual `importance` values. If `importancesort=0` and is used along with the `viewbox` parameter, results are sorted only by distance. Defaults to `1`.","$schema":"http://json-schema.org/draft-04/schema#"},"dedupe":{"type":"integer","enum":[0,1],"default":0,"description":"Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Our Geocoder will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to `0`. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested.","$schema":"http://json-schema.org/draft-04/schema#"}},"required":["q"]}]},"response":{"200":{"title":"location-autocomplete","x-stoplight":{"id":"05c483aae353e"},"type":"array","items":{"type":"object","properties":{"place_id":{"type":"string","description":"Unique identifier for the place."},"osm_id":{"type":"string","description":"Unique identifier for the OpenStreetMap object."},"osm_type":{"type":"string","description":"Type of OpenStreetMap object."},"licence":{"type":"string","description":"License information for the data."},"lat":{"type":"string","description":"Latitude of the location."},"lon":{"type":"string","description":"Longitude of the location."},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string"}},"class":{"type":"string","description":"The category of this result"},"type":{"type":"string","description":"The 'type' of the class/category of this result"},"display_name":{"type":"string","description":"Formatted address for display."},"display_place":{"type":"string","description":"Only the name part of the address; if the `type` is a `city`, just the city's name. If the `type` is `highway`, just the road's name. This is helpful when a client library wants to display this information separately."},"display_address":{"type":"string","description":"The complete address without the text already present in `display_place`."},"address":{"title":"address-autocomplete","x-stoplight":{"id":"ne9kgzxgg54ig"},"type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","x-examples":{"Example 1":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Manhattan Community Board 5","suburb":"Manhattan","city":"New York","county":"New York County","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"},"Result from Ocean":{"name":"South Pacific Ocean"},"Example 2":{"name":"South Pacific Ocean"}},"properties":{"name":{"type":"string","description":"House name or Point of Interest (POI)"},"house_number":{"type":"string","description":"House or Building number","examples":["3894"]},"road":{"type":"string","description":"Roads, Highways, Freeways, Motorways","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhoods, Allotments, Quarters, Communities"},"suburb":{"type":"string","description":"Suburbs, Subdivisions"},"city":{"type":"string","description":"Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets","examples":["Landen"]},"county":{"type":"string","description":"Counties","examples":["Warren County"]},"state":{"type":"string","description":"States, Provinces, Regions, State Districts","examples":["Ohio"]},"state_code":{"type":"string","description":"State or Province Code","examples":["oh"]},"postcode":{"type":"string","description":"Postal Codes, Zipcodes","examples":["45039"]},"country":{"type":"string","description":"Countries, Nation-states","examples":["United States of America"]},"country_code":{"type":"string","description":"Country Code - 2 letter (ISO 3166-1 alpha-2)","examples":["us"]}}}}},"x-examples":{"Example 1":[{"place_id":"322123240136","osm_id":"34633854","osm_type":"way","licence":"https://locationiq.com/attribution","lat":"40.7484284","lon":"-73.98565462","boundingbox":["40.7479226","40.7489422","-73.9864855","-73.9848259"],"class":"office","type":"yes","display_name":"Empire State Building, 350, 5th Avenue, Midtown South, Manhattan, New York, New York, 10001, USA","display_place":"Empire State Building","display_address":"350, 5th Avenue, Midtown South, Manhattan, New York, New York, 10001, USA","address":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Midtown South","suburb":"Manhattan","city":"New York","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"}}]},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Balance = {"response":{"200":{"title":"balance","type":"object","properties":{"status":{"type":"string","description":"`ok` on success.\n","examples":["ok"]},"balance":{"title":"daybalance","type":"object","description":"An array comprising individual components such as `day` and `bonus`.","properties":{"day":{"type":"integer","description":"Balance of requests credits in your account for the day.","examples":[547933]},"bonus":{"type":"integer","description":"Balance of bonus / promotional request credits in your account.","examples":[123]}},"x-examples":{"Example 1":{"day":30000,"bonus":0}}}},"x-examples":{"Example 1":{"status":"ok","balance":{"day":30000,"bonus":0}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Directions = {"metadata":{"allOf":[{"type":"object","properties":{"profile":{"type":"string","examples":["driving"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Mode of transportation. Only `driving` is supported at the moment. "},"coordinates":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"String of format `{longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...]` or `polyline({polyline}) or polyline6({polyline6})`. <br> You can send up to a maximum of `25` coordinate pairs per request (except `Nearest API` where `coordinates` only supports a single {longitude},{latitude} entry)"}},"required":["profile","coordinates"]},{"type":"object","properties":{"bearings":{"type":"string","examples":["10,20;40,30;30,9"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Accepted Value :- `{bearing};{bearing}[;{bearing} ...]`\nEach `{bearing}` follows the following format: `{value},{range}` `integer 0 .. 360,integer 0 .. 180`"},"radiuses":{"type":"string","examples":["500;200;300"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to given radius in meters Radiuses array length should be same as coordinates array, each value separated by semi-colon. Accepted Value - `{radius};{radius}[;{radius} ...]`\nEach `{radius}` has following format: `double >= 0` or `unlimited` (default)"},"hints":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Hint from previous request to derive position in street network. Accepted value: `{hint};{hint}[;{hint} ...]`"},"alternatives":{"type":"number","$schema":"http://json-schema.org/draft-04/schema#","description":"Search for alternative routes. Passing a number alternatives=n searches for up to n alternative routes.\nAccepted value: `true`, `false` (default), or Number"},"steps":{"type":"string","examples":["true"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route steps for each route leg.\nAccepted value:  `true`, `false` (default)"},"annotations":{"type":"string","default":"false","examples":["false"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returns additional metadata for each coordinate along the route geometry.\nAccepted value: `true`, `false` (default), `nodes`, `distance`, `duration`, `datasources`, `weight`, `speed`"},"geometries":{"type":"string","default":"polyline","examples":["polyline"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route geometry format (influences overview and per step). Accepted value: `polyline` (default), `polyline6`, `geojson`"},"overview":{"type":"string","default":"simplified","examples":["simplified"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all.\nAccepted value: `simplified` (default), `full`, `false`"},"continue_straight":{"type":"string","default":"default","examples":["default"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster.\nAccepted value: `default` (default), `true`, `false`. Default value depends on the profile. "},"waypoints":{"type":"string","examples":["0;1;2"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. `{index};{index};{index}... ]`"}},"required":[]}]},"response":{"200":{"title":"Directions","type":"object","x-examples":{"Example 1":{"code":"string","waypoints":[{"distance":0,"location":[0]}],"routes":[]}},"properties":{"code":{"type":"string","description":"If the request was successful `Ok` otherwise see the service dependent and general status codes."},"waypoints":{"type":"array","description":"Object used to describe waypoint on a route.","items":{"type":"object","properties":{"hint":{"type":"string","x-stoplight":{"id":"to7sli9hdk2jt"},"description":"The distance, in meters, from the input coordinate to the snapped coordinate."},"distance":{"type":"number","description":"The distance, in meters, from the input coordinate to the snapped coordinate."},"name":{"type":"string","x-stoplight":{"id":"5vuo71t8c0zy4"},"description":"Unique internal identifier of the segment (ephemeral, not constant over data updates)\n   This can be used on subsequent request to significantly speed up the query and to connect multiple services.\n   E.g. you can use the `hint` value obtained by the `nearest` query as `hint` values for `route` inputs."},"location":{"type":"array","description":"Array that contains the `[longitude, latitude]` pair of the snapped coordinate.","items":{"type":"number"}}}}},"routes":{"title":"Routes","type":"array","description":"Represents a route through (potentially multiple) waypoints.","items":{"title":"Route","type":"object","properties":{"legs":{"type":"array","description":"Represents a route between two waypoints.","items":{"type":"object","properties":{"steps":{"type":"array","description":"A step consists of a maneuver such as a turn or merge, followed\nby a distance of travel along a single way to the subsequent\nstep.\n\nDepends on the `steps` parameter.\n\n| steps        |                                                                       |\n|--------------|-----------------------------------------------------------------------|\n| true         | array of `RouteStep` objects describing the turn-by-turn instructions |\n| false        | empty array                                                           |","items":{"type":"object","properties":{"intersections":{"type":"object","description":"An intersection gives a full representation of any cross-way the path passes bay. For every step, the very first intersection (`intersections[0]`) corresponds to the\nlocation of the StepManeuver. Further intersections are listed for every cross-way until the next turn instruction.","properties":{"location":{"type":"array","description":"A `[longitude, latitude]` pair describing the location of the turn.","items":{"type":"number"}},"in":{"type":"number","x-stoplight":{"id":"lskt57vdr20n9"},"description":"index into bearings/entry array. Used to calculate the bearing just before the turn. Namely, the clockwise angle from true north to the\n  direction of travel immediately before the maneuver/passing the intersection. Bearings are given relative to the intersection. To get the bearing\n  in the direction of driving, the bearing has to be rotated by a value of 180. The value is not supplied for `depart` maneuvers."},"out":{"type":"number","description":"index into the bearings/entry array. Used to extract the bearing just after the turn. Namely, The clockwise angle from true north to the\n  direction of travel immediately after the maneuver/passing the intersection. The value is not supplied for `arrive` maneuvers."},"bearings":{"type":"number","description":"A list of bearing values (e.g. [0,90,180,270]) that are available at the intersection. The bearings describe all available roads at the intersection. Values are between 0-359 (0=true north)"},"entry":{"type":"string","description":"A list of entry flags, corresponding in a 1:1 relationship to the bearings. A value of `true` indicates that the respective road could be entered on a valid route.\n  `false` indicates that the turn onto the respective road would violate a restriction."},"classes":{"type":"array","x-stoplight":{"id":"8eciacki4fjia"},"description":"An array of strings signifying the classes (as specified in the profile) of the road exiting the intersection.","items":{"x-stoplight":{"id":"zl73uiawtykik"},"type":"string"}},"lanes":{"type":"array","x-stoplight":{"id":"cbz5c1js7urfb"},"description":"A `Lane` represents a turn lane at the corresponding turn location.","items":{"x-stoplight":{"id":"2belpw9ad3exo"},"type":"object","properties":{"indications":{"type":"string","x-stoplight":{"id":"c4au3wfzuqkb3"},"description":"An indication (e.g. marking on the road) specifying the turn lane. A road can have multiple indications (e.g. an arrow pointing straight and left). The indications are given in an array, each containing one of the following types. Further indications might be added on without an API version change.\n\n| `value`                | Description                                                                                                               |\n|------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| `none`                 | No dedicated indication is shown.                                                                                         |\n| `uturn`                | An indication signaling the possibility to reverse (i.e. fully bend arrow).                                               |\n| `sharp right`          | An indication indicating a sharp right turn (i.e. strongly bend arrow).                                                   |\n| `right`                | An indication indicating a right turn (i.e. bend arrow).                                                                  |\n| `slight right`         | An indication indicating a slight right turn (i.e. slightly bend arrow).                                                  |\n| `straight`             | No dedicated indication is shown (i.e. straight arrow).                                                                   |\n| `slight left`          | An indication indicating a slight left turn (i.e. slightly bend arrow).                                                   |\n| `left`                 | An indication indicating a left turn (i.e. bend arrow).                                                                   |\n| `sharp left`           | An indication indicating a sharp left turn (i.e. strongly bend arrow).                                                    |"},"valid":{"type":"string","x-stoplight":{"id":"rm2ay92cpk5dn"},"description":"A boolean flag (represented as `string`) indicating whether the lane is a valid choice in the current maneuver."}}}}}},"driving_side":{"type":"string","description":"The legal driving side at the location for this step. Either `left` or `right`."},"geometry":{"type":"string","description":"The unsimplified geometry of the route segment, depending on the `geometries` parameter.\n\n| `geometry` |                                                                    |\n|------------|--------------------------------------------------------------------|\n| polyline   | [polyline](https://www.npmjs.com/package/polyline) with precision 5 in [latitude,longitude] encoding |\n| polyline6  | [polyline](https://www.npmjs.com/package/polyline) with precision 6 in [latitude,longitude] encoding |\n| geojson    | [GeoJSON `LineString`](http://geojson.org/geojson-spec.html#linestring) |"},"duration":{"type":"number","description":"The estimated travel time, in `float` number of seconds."},"distance":{"type":"number","description":"The distance of travel from the maneuver to the subsequent step, in `float` meters."},"name":{"type":"string","description":"The name of the way along which travel proceeds."},"weight":{"type":"number","description":"The calculated weight of the step."},"mode":{"type":"string","description":"A string signifying the mode of transportation."},"maneuver":{"type":"array","description":"A `StepManeuver` object representing the maneuver.","items":{"type":"object","properties":{"bearing_after":{"type":"number","description":"The clockwise angle from true north to the\n  direction of travel immediately after the maneuver. Range 0-359."},"location":{"type":"array","description":"A `[longitude, latitude]` pair describing the location of the turn.","items":{"type":"number"}},"type":{"type":"string","description":"A string indicating the type of maneuver. **new identifiers might be introduced without API change**\n\n| `type`           | Description                                                  |\n|------------------|--------------------------------------------------------------|\n| `turn`           | a basic turn into direction of the `modifier`                |\n| `new name`       | no turn is taken/possible, but the road name changes. The road can take a turn itself, following `modifier`.                  |\n| `depart`         | indicates the departure of the leg                           |\n| `arrive`         | indicates the destination of the leg                         |\n| `merge`          | merge onto a street (e.g. getting on the highway from a ramp, the `modifier specifies the direction of the merge`) |\n| `ramp`           | **Deprecated**. Replaced by `on_ramp` and `off_ramp`.        |\n| `on ramp`        | take a ramp to enter a highway (direction given my `modifier`) |\n| `off ramp`       | take a ramp to exit a highway (direction given my `modifier`)  |\n| `fork`           | take the left/right side at a fork depending on `modifier`   |\n| `end of road`    | road ends in a T intersection turn in direction of `modifier`|\n| `use lane`       | **Deprecated** replaced by lanes on all intersection entries |\n| `continue`       | Turn in direction of `modifier` to stay on the same road     |\n| `roundabout`     | traverse roundabout, if the route leaves the roundabout there will be an additional property `exit` for exit counting. The modifier specifies the direction of entering the roundabout. |\n| `rotary`         | a traffic circle. While very similar to a larger version of a roundabout, it does not necessarily follow roundabout rules for right of way. It can offer `rotary_name` and/or `rotary_pronunciation` parameters (located in the RouteStep object) in addition to the `exit` parameter (located on the StepManeuver object).  |\n| `roundabout turn`| Describes a turn at a small roundabout that should be treated as normal turn. The `modifier` indicates the turn direction. Example instruction: `At the roundabout turn left`. |\n| `notification`   | not an actual turn but a change in the driving conditions. For example the travel mode or classes. If the road takes a turn itself, the `modifier` describes the direction |\n| `exit roundabout`| Describes a maneuver exiting a roundabout (usually preceded by a `roundabout` instruction) |\n| `exit rotary`    | Describes the maneuver exiting a rotary (large named roundabout) |"},"bearing_before":{"type":"number","description":"he clockwise angle from true north to the\n  direction of travel immediately before the maneuver. Range 0-359."},"modifier":{"type":"string","description":"An optional `string` indicating the direction change of the maneuver.\n\n| `modifier`        | Description                               |\n|-------------------|-------------------------------------------|\n| `uturn`           | indicates  reversal of direction          |\n| `sharp right`     | a sharp right turn                        |\n| `right`           | a normal turn to the right                |\n| `slight right`    | a slight turn to the right                |\n| `straight`        | no relevant change in direction           |\n| `slight left`     | a slight turn to the left                 |\n| `left`            | a normal turn to the left                 |\n| `sharp left`      | a sharp turn to the left                  |\n\n The list of turns without a modifier is limited to: `depart/arrive`. If the source/target location is close enough to the `depart/arrive` location, no modifier will be given.\n\n  The meaning depends on the `type` property.\n\n| `type`                 | Description                                                                                                               |\n|------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| `turn`                 | `modifier` indicates the change in direction accomplished through the turn                                                |\n| `depart`/`arrive`      | `modifier` indicates the position of departure point and arrival point in relation to the current direction of travel     |\n\n- `exit` An optional `integer` indicating number of the exit to take. The property exists for the `roundabout` / `rotary` property:\n  Number of the roundabout exit to take. If exit is `undefined` the destination is on the roundabout.\n\n\nNew properties (potentially depending on `type`) may be introduced in the future without an API version change."},"ref":{"type":"string","description":"A reference number or code for the way. Optionally included, if ref data is available for the given way."}}}}}}},"weight":{"type":"number","description":"The calculated weight of the route leg."},"distance":{"type":"number","description":"The distance traveled by this route leg, in `float` meters.\n"},"annotations":{"type":"object","description":"Additional details about each coordinate along the route geometry, with fine-grained information about each segment or node id.\n\n| annotations  |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| true         | An `Annotation` object containing node ids, durations, distances and weights. |\n| false        | `undefined`                                                                   |\n","properties":{"speed":{"type":"array","description":"Convenience field, calculation of `distance / duration` rounded to one decimal place.","items":{"type":"number"}},"metadata":{"type":"object","description":"Metadata related to other annotations.","properties":{"datasource_names":{"type":"array","description":"The names of the datasources used for the speed between each pair of coordinates. `lua profile` is the default profile, other values are the filenames supplied via `--segment-speed-file` to `osrm-contract` or `osrm-customize`.","items":{"type":"string"}}}},"nodes":{"type":"array","description":"The OSM node ID for each coordinate along the route, excluding the first/last user-supplied coordinates.","items":{"type":"number"}},"duration":{"type":"array","description":"The duration between each pair of coordinates, in seconds. Does not include the duration of any turns.","items":{"type":"number"}},"distance":{"type":"array","description":"The distance, in meters, between each pair of coordinates.","items":{"type":"number"}},"weight":{"type":"array","description":"The weights between each pair of coordinates. Does not include any turn costs.","items":{"type":"number"}},"datasources":{"type":"array","description":"The index of the datasource for the speed between each pair of coordinates. `0` is the default profile, other values are supplied via `--segment-speed-file` to `osrm-contract` or `osrm-customize`. String-like names are in the `metadata.datasource_names` array.","items":{"type":"number"}}}},"summary":{"type":"string","description":"Summary of the route taken as `string`. Depends on the `summary` parameter.\n\n| summary      |                                                                       |\n|--------------|-----------------------------------------------------------------------|\n| true         | Names of the two major roads used. Can be empty if route is too short.|\n| false        | empty `string`                                                        |"},"duration":{"type":"string","description":"The estimated travel time, in `float` number of seconds."}}}},"weight_name":{"type":"string"},"geometry":{"type":"string"},"weight":{"type":"number"},"distance":{"type":"number"},"duration":{"type":"number"}}}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const GetTimezone = {"metadata":{"allOf":[{"type":"object","properties":{"lat":{"type":"number","format":"float","examples":[40.748442],"minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38,"$schema":"http://json-schema.org/draft-04/schema#","description":"Latitude of the location to generate an address for."},"lon":{"type":"number","format":"float","examples":[-73.985658],"minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38,"$schema":"http://json-schema.org/draft-04/schema#","description":"Longitude of the location to generate an address for."},"timestamp":{"type":"number","examples":[1701179610],"$schema":"http://json-schema.org/draft-04/schema#","description":"Unix epoch time in seconds (number of seconds since January 1, 1970, 00:00:00 UTC). Defaults to current time if omitted. This parameter allows retrieval of time zone information for specific moments, which is useful for handling Daylight Saving Time changes and ensuring correct time zone offsets for historical data or future event scheduling."}},"required":["lat","lon"]}]},"response":{"200":{"type":"object","x-examples":{"Example 1":{"timezone":{"name":"Asia/Kolkata","now_in_dst":0,"offset_sec":19800,"short_name":"IST","full_name":"India Standard Time"}}},"properties":{"timezone":{"type":"object","description":"Timezone object found for the location.","properties":{"name":{"type":"string","description":"Timezone identifier, compatible with the IANA Tz Database. Typically in the format \"Area/Location\" (e.g., \"America/New_York\", \"Europe/Paris\"), but can also include ocean areas (e.g., \"Atlantic/Azores\") and special administrative zones (e.g., \"Etc/UTC\", \"Etc/GMT-14\"). We always return the most current identifier (e.g., \"Asia/Kolkata\", not \"Asia/Calcutta\"). Note that \"Etc/GMT\" zones use POSIX-style signs, opposite to ISO 8601 convention (e.g., \"Etc/GMT-14\" is 14 hours ahead of GMT)."},"now_in_dst":{"type":"integer","description":"Represents whether the zone currently observing `DST` or not."},"offset_sec":{"type":"integer","description":"The offset from `UTC` (in seconds) for the given location. Considers `DST` savings."},"short_name":{"type":"string","description":"Time zone abbreviation, usually 3 or 4 letters (e.g., \"EDT\" for Eastern Daylight Time, \"CEST\" for Central European Summer Time). In some cases, especially for locations without standardized abbreviations, it may be a numeric UTC offset (e.g., \"+03\" or \"+0330\")."},"full_name":{"type":"string","x-stoplight":{"id":"1qb7hcby2gwow"},"description":"Complete, descriptive name of the time zone, e.g. \"Pacific Daylight Time\" or \"Central European Standard Time\". For some locations (e.g., oceans) where such a name is unavailable, it is returned in the format of GMT±HH:MM (e.g., GMT+03:30)."}}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Lookup = {"metadata":{"allOf":[{"type":"object","properties":{"osm_ids":{"type":"string","examples":["R146656,W104393803,N240109189"],"$schema":"http://json-schema.org/draft-04/schema#","description":"This must contain a comma-separated list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 3 ids can be queried at the same time."},"json_callback":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Wrap json output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats."},"addressdetails":{"type":"integer","enum":[0,1],"default":1,"description":"Include a breakdown of the address of this result into elements. Important components include (but not limited to) country, postcode, state, county, city, town. Only those elements that are available for a given location will be returned.","$schema":"http://json-schema.org/draft-04/schema#"},"extratags":{"type":"integer","enum":[0,1],"default":0,"description":"Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"namedetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"accept-language":{"type":"string","default":"en","examples":["en"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Preferred language order for showing search results, overrides the value specified in the `Accept-Language` HTTP header. Defaults to `en`. \n\nTo use native language for the response when available, use `accept-language=native`. \n\nEither uses standard <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\" target=\"_blank\">rfc2616 accept-language string</a> or a simple comma separated list of language codes."},"polygon_geojson":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in geojson format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_kml":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in kml format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_svg":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in svg format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_text":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results as a WKT. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_threshold":{"type":"number","default":0,"examples":[0.2],"$schema":"http://json-schema.org/draft-04/schema#","description":"When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry."},"normalizeaddress":{"type":"integer","enum":[0,1],"default":0,"description":"Makes parsing of the `address` object easier by returning a predictable and defined list of elements. Defaults to `0` for backward compatibility. We recommend setting this to `1` for new projects.\n\n  Element Name  | Description\n  ------------- | -----------\n  name          | House name or Point of Interest (POI) such as a Cafe or School\n  house_number  | House or Building number\n  road          | Roads, Highways, Freeways, Motorways\n  neighbourhood | Neighbourhoods, Allotments, Quarters, Communities\n  suburb        | Suburbs, Subdivisions\n  island        | Islands, Islets\n  city          | Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets\n  county        | Counties\n  state         | States, Provinces, Regions, State Districts\n  state_code    | State or Province Code\n  postcode      | Postal Codes, Zipcodes\n  country       | Countries, Nation-states\n  country_code  | Country Code - 2 letter (ISO 3166-1 alpha-2)","$schema":"http://json-schema.org/draft-04/schema#"},"normalizecity":{"type":"integer","enum":[0,1],"default":0,"description":"For responses with no `city` value in the address section, the next available element in this order - `city_district`, `locality`, `town`, `borough`, `municipality`, `village`, `hamlet`, `quarter`, `neighbourhood` - from the address section will be normalized to city. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"postaladdress":{"type":"integer","enum":[0,1],"default":0,"description":"Returns address inside the `postaladdress` key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"statecode":{"type":"integer","enum":[0,1],"default":0,"description":"Adds state or province code when available to the `state_code` key inside the `address` object. Currently supported for addresses in the USA, Canada and Australia. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"format":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Output Format. Only `json` supported as of now."}},"required":["osm_ids"]}]},"response":{"200":{"type":"object","x-examples":{"Example 1":{"place_id":115462561,"licence":"Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright","osm_type":"way","osm_id":50637691,"boundingbox":["52.3994612","52.3996426","13.0479574","13.0481754"],"lat":"52.399550700000006","lon":"13.048066846939687","display_name":"Brandenburger Tor, Brandenburger Straße, Historische Innenstadt, Innenstadt, Potsdam, Brandenburg, 14467, Germany","class":"tourism","type":"attraction","address":{"tourism":"Brandenburger Tor","road":"Brandenburger Straße","suburb":"Historische Innenstadt","city":"Potsdam","state":"Brandenburg","postcode":"14467","country":"Germany","country_code":"de"},"extratags":{"image":"http://commons.wikimedia.org/wiki/File:Potsdam_brandenburger_tor.jpg","heritage":"4","wikidata":"Q695045","architect":"Carl von Gontard;Georg Christian Unger","wikipedia":"de:Brandenburger Tor (Potsdam)","wheelchair":"yes","description":"Kleines Brandenburger Tor in Potsdam","heritage:website":"http://www.bldam-brandenburg.de/images/stories/PDF/DML%202012/04-p-internet-13.pdf","heritage:operator":"bldam","architect:wikidata":"Q68768;Q95223","year_of_construction":"1771"}}},"properties":{"place_id":{"type":"integer","description":"Unique identifier for the place."},"licence":{"type":"string","description":"License information for the data."},"osm_type":{"type":"string","description":"Type of OpenStreetMap object."},"osm_id":{"type":"integer","description":"Unique identifier for the OpenStreetMap object."},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string"}},"lat":{"type":"string","description":"Latitude of the location."},"lon":{"type":"string","description":"Longitude of the location.\n"},"display_name":{"type":"string","description":"Formatted address for display."},"class":{"type":"string","description":"Categorization of map features based on their nature."},"type":{"type":"string","description":"It denotes the specific kind of feature within a class."},"address":{"title":"address","type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","properties":{"house_number":{"type":"string","description":"House number","examples":["3894"]},"road":{"type":"string","description":"Road name","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhood"},"hamlet":{"type":"string","description":"Hamlet"},"suburb":{"type":"string","description":"Suburb"},"village":{"type":"string","description":"Village name","examples":["Landen"]},"town":{"type":"string","description":"Town name"},"city_district":{"type":"string","description":"Administrative area between city level and town level"},"city":{"type":"string","description":"City name","examples":["Landen"]},"region":{"type":"string","description":"Region name"},"county":{"type":"string","description":"County name","examples":["Warren County"]},"state_district":{"type":"string","description":"District name"},"state":{"type":"string","description":"State name","examples":["Ohio"]},"state_code":{"type":"string","description":"State code","examples":["oh"]},"postcode":{"type":"string","description":"Postal code","examples":["45039"]},"country":{"type":"string","description":"Country name","examples":["United States of America"]},"country_code":{"type":"string","description":"Country code","examples":["us"]},"name":{"type":"string","description":"Name of the entity/road in the given location"},"water":{"type":"string","x-stoplight":{"id":"7nunw3epqpcqo"},"description":"The name of an ocean or sea, if the location falls within a body of water outside any country's administrative regions."}},"x-examples":{"Example 1":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Result from Ocean":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Example 2":{"name":"South Pacific Ocean","water":"South Pacific Ocean"}}},"extratags":{"type":"object","x-examples":{"Example 1":{"ele":"15","height":"443.2","wikidata":"Q9188","wikipedia":"en:Empire State Building","start_date":"1931","wheelchair":"yes","building:use":"office","opening_hours":"Mo-Su 08:00-02:00","building:levels":"102","construction_date":"1930-1931"}},"description":"The dictionary with additional useful tags like website or maxspeed. Returned when `extratags=1` is set in the request.\n","additionalProperties":true}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Matching = {"metadata":{"allOf":[{"type":"object","properties":{"profile":{"type":"string","examples":["driving"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Mode of transportation. Only `driving` is supported at the moment. "},"coordinates":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"String of format `{longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...]` or `polyline({polyline}) or polyline6({polyline6})`. <br> You can send up to a maximum of `25` coordinate pairs per request (except `Nearest API` where `coordinates` only supports a single {longitude},{latitude} entry)"}},"required":["profile","coordinates"]},{"type":"object","properties":{"bearings":{"type":"string","examples":["10,20;40,30;30,9"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Accepted Value :- `{bearing};{bearing}[;{bearing} ...]`\nEach `{bearing}` follows the following format: `{value},{range}` `integer 0 .. 360,integer 0 .. 180`"},"radiuses":{"type":"string","examples":["500;200;300"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to given radius in meters Radiuses array length should be same as coordinates array, each value separated by semi-colon. Accepted Value - `{radius};{radius}[;{radius} ...]`\nEach `{radius}` has following format: `double >= 0` or `unlimited` (default)"},"hints":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Hint from previous request to derive position in street network. Accepted value: `{hint};{hint}[;{hint} ...]`"},"steps":{"type":"string","examples":["true"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route steps for each route leg.\nAccepted value:  `true`, `false` (default)"},"geometries":{"type":"string","default":"polyline","examples":["polyline"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route geometry format (influences overview and per step). Accepted value: `polyline` (default), `polyline6`, `geojson`"},"annotations":{"type":"string","default":"false","examples":["false"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returns additional metadata for each coordinate along the route geometry.\nAccepted value: `true`, `false` (default), `nodes`, `distance`, `duration`, `datasources`, `weight`, `speed`"},"overview":{"type":"string","default":"simplified","examples":["simplified"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all.\nAccepted value: `simplified` (default), `full`, `false`"},"timestamps":{"type":"string","examples":["200;300;900"],"$schema":"http://json-schema.org/draft-04/schema#","description":"'Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. \nAccepted value: `{timestamp};{timestamp}[;{timestamp} ...]`\nEach `{timestamp}` has the following format: integer seconds since UNIX epoch'"},"gaps":{"type":"string","default":"split","examples":["ignore"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Allows the input track splitting based on huge timestamp gaps between points. Accepted value: `split` (default), `ignore`"},"tidy":{"type":"string","default":"false","examples":["false"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Allows the input track modification to obtain better matching quality for noisy tracks. Accepted value: `true`, `false` (default)."},"waypoints":{"type":"string","examples":["0;1;2"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. `{index};{index};{index}... ]`"}},"required":[]}]},"response":{"200":{"title":"Matching","type":"object","properties":{"code":{"type":"string","description":"If the request was successful `Ok` otherwise see the service dependent and general status codes."},"tracepoints":{"type":"array","description":"Array of `Waypoint` objects representing all points of the trace in order.\n\nIf the trace point was omitted by map matching because it is an outlier, the entry will be `null`.","items":{"type":"object","properties":{"waypoint_index":{"type":"integer","description":"Index of the waypoint inside the matched route."},"matchings_index":{"type":"integer","description":"Index to the `Route` object in `matchings` the sub-trace was matched to."},"alternatives_count":{"type":"integer","description":"Number of probable alternative matchings for this trace point. A value of zero indicate that this point was matched unambiguously. Split the trace at these points for incremental map matching."},"distance":{"type":"number"},"location":{"type":"array","items":{"type":"number"}},"name":{"type":"string"}}}},"matchings":{"type":"array","description":"An array of `Route` objects that assemble the trace.","items":{"type":"object","properties":{"duration":{"type":"number"},"distance":{"type":"number"},"weight":{"type":"number"},"geometry":{"type":"string"},"confidence":{"type":"number","description":"Confidence of the matching. `float` value between 0 and 1. 1 is very confident that the matching is correct."},"weight_name":{"type":"string"},"legs":{"type":"array","items":{"type":"object","properties":{"steps":{"type":"array","items":{"type":"object","properties":{"intersections":{"type":"object","properties":{"out":{"type":"number"},"entry":{"type":"string"},"location":{"type":"array","items":{"type":"number"}},"bearings":{"type":"number"}}},"driving_side":{"type":"string"},"geometry":{"type":"string"},"duration":{"type":"number"},"distance":{"type":"number"},"name":{"type":"string"},"weight":{"type":"number"},"mode":{"type":"string"},"maneuver":{"type":"array","items":{"type":"object","properties":{"bearing_after":{"type":"number"},"location":{"type":"array","items":{"type":"number"}},"type":{"type":"string"},"bearing_before":{"type":"number"},"modifier":{"type":"string"},"ref":{"type":"string"}}}}}}},"weight":{"type":"number"},"distance":{"type":"number"},"summary":{"type":"string"},"duration":{"type":"string"}}}}}}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Matrix = {"metadata":{"allOf":[{"type":"object","properties":{"profile":{"type":"string","examples":["driving"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Mode of transportation. Only `driving` is supported at the moment. "},"coordinates":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"String of format `{longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...]` or `polyline({polyline}) or polyline6({polyline6})`. <br> You can send up to a maximum of `25` coordinate pairs per request (except `Nearest API` where `coordinates` only supports a single {longitude},{latitude} entry)"}},"required":["profile","coordinates"]},{"type":"object","properties":{"bearings":{"type":"string","examples":["10,20;40,30;30,9"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Accepted Value :- `{bearing};{bearing}[;{bearing} ...]`\nEach `{bearing}` follows the following format: `{value},{range}` `integer 0 .. 360,integer 0 .. 180`"},"radiuses":{"type":"string","examples":["500;200;300"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to given radius in meters Radiuses array length should be same as coordinates array, each value separated by semi-colon. Accepted Value - `{radius};{radius}[;{radius} ...]`\nEach `{radius}` has following format: `double >= 0` or `unlimited` (default)"},"hints":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Hint from previous request to derive position in street network. Accepted value: `{hint};{hint}[;{hint} ...]`"},"sources":{"type":"integer","$schema":"http://json-schema.org/draft-04/schema#","description":"Use location with given index as source. Accepted value: `{index};{index}[;{index} ...]` or `all` (default). \nEach `{index}` has the following format: 0 <= integer < #locations"},"destinations":{"type":"integer","examples":[2],"$schema":"http://json-schema.org/draft-04/schema#","description":"Use location with given index as destination.\nAccepted value: `{index};{index}[;{index} ...]` or `all` (default)\nEach `{index}` has the following format: 0 <= integer < #locations"},"annotations":{"type":"string","default":"false","examples":["false"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returns additional metadata for each coordinate along the route geometry.\nAccepted value: `true`, `false` (default), `nodes`, `distance`, `duration`, `datasources`, `weight`, `speed`"},"fallback_speed":{"type":"number","examples":[25.65],"$schema":"http://json-schema.org/draft-04/schema#","description":"If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. \nAccepted value: double > 0"},"fallback_coordinate":{"type":"string","default":"input","examples":["snapped"],"$schema":"http://json-schema.org/draft-04/schema#","description":"When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. \nAccepted value: `input` (default), or `snapped`."}},"required":[]}]},"response":{"200":{"title":"Matrix","type":"object","properties":{"code":{"type":"string","description":"If the request was successful `Ok` otherwise see the service dependent and general status codes."},"distances":{"type":"array","description":"array of arrays that stores the matrix in row-major order. `distances[i][j]` gives the travel distance from\n  the i-th waypoint to the j-th waypoint. Values are given in meters. Can be `null` if no route between `i` and `j` can be found.","items":{"type":"array","items":{"x-stoplight":{"id":"47kxducsjqmpa"},"type":"number"}}},"durations":{"type":"array","x-stoplight":{"id":"1dbpasj6bvxow"},"description":"array of arrays that stores the matrix in row-major order. `durations[i][j]` gives the travel time from\n  the i-th waypoint to the j-th waypoint. Values are given in seconds. Can be `null` if no route between `i` and `j` can be found.","items":{"x-stoplight":{"id":"d0uif6pp5vwkx"},"type":"array","items":{"x-stoplight":{"id":"l20aqj8f0wgop"},"type":"number"}}},"fallback_speed_cells":{"type":"array","items":{"type":"number"}},"sources":{"type":"array","description":"array of `Waypoint` objects describing all sources in order.","items":{"type":"object","properties":{"distance":{"type":"number"},"location":{"type":"array","items":{"type":"number"}},"name":{"type":"string"}}}},"destinations":{"type":"array","description":"array of `Waypoint` objects describing all destinations in order.","items":{"type":"object","properties":{"distance":{"type":"number"},"location":{"type":"array","items":{"type":"number"}},"name":{"type":"string"}}}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Nearby = {"metadata":{"allOf":[{"type":"object","properties":{"lat":{"type":"number","format":"float","examples":[40.748442],"minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38,"$schema":"http://json-schema.org/draft-04/schema#","description":"Latitude of the location to generate an address for."},"lon":{"type":"number","format":"float","examples":[-73.985658],"minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38,"$schema":"http://json-schema.org/draft-04/schema#","description":"Longitude of the location to generate an address for."},"tag":{"type":"string","examples":["amenity:school"],"$schema":"http://json-schema.org/draft-04/schema#","description":"You can use a `tag` to restrict your results on the Nearby API. We support two types of tags, a single-word format for common use-cases and key-value pairs for advanced use-cases.\n\n### 1. Single-word Format (Simple)\nFor most use-cases, the list of tags below should suffice. Multiple tags can be specified as a comma-separated list.\n\nTag             | Description\n----------------| -----------\nall             | Return a list of all PoIs\nairport         | List of airports\nrestaurant      | List of restaurants\nbank            | List of banks\natm             | List of ATMs\nhotel           | List of hotels\npub             | List of pubs\nbus_station     | List of bus stations\nrailway_station | List of railway stations\ncinema          | List of cinema theatres\nhospital        | List of hospitals\ncollege         | List of colleges\nschool          | List of schools\npharmacy        | List of pharmacies\nsupermarket     | List of supermarket\nfuel            | List of fuel stations\ngym             | List of gyms\nplace_of_worship| List of places of worship\ntoilet          | List of toilets\npark            | List of parks\nstadium         | List of stadiums\nparking         | List of parking\ncardealer       | List of car dealers\n\n### 2. Key Value Format (Advanced)\nFor advanced use-cases that need additional tags not present in the table above, we also support tags based on OpenStreetMap''s (OSM)  <a href=\"https://wiki.openstreetmap.org/wiki/Map_Features\" target=\"_blank\">exhaustive list</a> of tags. These tags are represented as key-value pairs of `class` and `type` values. Multiple `class` and `type` values can be specified as a comma-separated list.\n\n**Examples:** \n* To return a list of all PoIs: tag=all\n* To return records with amenity class (e.g., restaurants, hospitals, banks): tag=amenity:*\n* To return records with the amenity class and school as type (i.e., a list of schools): tag=amenity:school\n* To return all records except those with amenity as class: tag=all,!amenity:*\n* To return all records in the amenity class except gym: tag=amenity:*,!amenity:gym\n* To return all records except elements with amenity as class and gym as type: tag=!amenity:gym\n* To return a list of airports, hotels, and parking spaces nearby: tag=aeroway:aerodrome,tourism:hotel,amenity:parking"},"radius":{"type":"integer","default":100,"minimum":1,"maximum":30000,"$schema":"http://json-schema.org/draft-04/schema#","description":"Radius (in meters) from the given latitude and longitude to search for results in.\nAccepted value: `1` to `30000`. Defaults to `100`."},"limit":{"type":"integer","minimum":1,"maximum":50,"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit the number of returned results. Accepted value: `1` to `50`. Defaults to `10`."}},"required":["lat","lon"]}]},"response":{"200":{"title":"location-nearby-poi","x-stoplight":{"id":"gpmrvu628jbn5"},"type":"array","x-examples":{"Example 1":[{"place_id":"223483692","licence":"© LocationIQ.com CC BY 4.0, Data © OpenStreetMap contributors, ODbL 1.0","osm_type":"way","osm_id":"19301621","boundingbox":["39.307405567782","39.307505567782","-84.292824851595","-84.292724851595"],"lat":"39.3074555677816","lon":"-84.2927748515948","display_name":"3894, Spring Mill Way, Hunter’s Point, Landen, Warren County, Ohio, 45039, United States of America","class":"place","type":"house","importance":0.62025,"address":{"name":"Empire State Building","house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","city":"Landen"}}]},"items":{"type":"object","properties":{"place_id":{"type":"string","description":"Unique identifier for the place."},"licence":{"type":"string","description":"License information for the data."},"osm_type":{"type":"string","description":"Type of OpenStreetMap object."},"osm_id":{"type":"string","description":"Unique identifier for the OpenStreetMap object."},"lat":{"type":"string","description":"Latitude of the location."},"lon":{"type":"string","description":"Longitude of the location."},"display_name":{"type":"string","description":"Formatted address for display."},"class":{"type":"string","description":"The category of this result"},"type":{"type":"string","description":"The 'type' of the class/category of this result"},"address":{"title":"address-nearby","x-stoplight":{"id":"tbe7xjx22s96f"},"type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","x-examples":{"Example 1":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Manhattan Community Board 5","suburb":"Manhattan","city":"New York","county":"New York County","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"},"Result from Ocean":{"name":"South Pacific Ocean"},"Example 2":{"name":"South Pacific Ocean"}},"properties":{"name":{"type":"string","description":"House name or Point of Interest (POI)"},"house_number":{"type":"string","description":"House or Building number","examples":["3894"]},"road":{"type":"string","description":"Roads, Highways, Freeways, Motorways","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhoods, Allotments, Quarters, Communities"},"suburb":{"type":"string","description":"Suburbs, Subdivisions"},"city":{"type":"string","description":"Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets","examples":["Landen"]},"county":{"type":"string","description":"Counties","examples":["Warren County"]},"state":{"type":"string","description":"States, Provinces, Regions, State Districts","examples":["Ohio"]},"state_code":{"type":"string","description":"State or Province Code","examples":["oh"]},"postcode":{"type":"string","description":"Postal Codes, Zipcodes","examples":["45039"]},"country":{"type":"string","description":"Countries, Nation-states","examples":["United States of America"]},"country_code":{"type":"string","description":"Country Code - 2 letter (ISO 3166-1 alpha-2)","examples":["us"]}}},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string"}}},"required":["place_id","licence","lat","lon","display_name","boundingbox"]},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Nearest = {"metadata":{"allOf":[{"type":"object","properties":{"profile":{"type":"string","examples":["driving"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Mode of transportation. Only `driving` is supported at the moment. "},"coordinates":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"String of format `{longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...]` or `polyline({polyline}) or polyline6({polyline6})`. <br> You can send up to a maximum of `25` coordinate pairs per request (except `Nearest API` where `coordinates` only supports a single {longitude},{latitude} entry)"}},"required":["profile","coordinates"]},{"type":"object","properties":{"bearings":{"type":"string","examples":["10,20;40,30;30,9"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Accepted Value :- `{bearing};{bearing}[;{bearing} ...]`\nEach `{bearing}` follows the following format: `{value},{range}` `integer 0 .. 360,integer 0 .. 180`"},"radiuses":{"type":"string","examples":["500;200;300"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to given radius in meters Radiuses array length should be same as coordinates array, each value separated by semi-colon. Accepted Value - `{radius};{radius}[;{radius} ...]`\nEach `{radius}` has following format: `double >= 0` or `unlimited` (default)"},"hints":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Hint from previous request to derive position in street network. Accepted value: `{hint};{hint}[;{hint} ...]`"},"number":{"type":"integer","examples":[3],"$schema":"http://json-schema.org/draft-04/schema#","description":"Number of nearest segments that should be returned. Accepted value: `integer >= 1` (default `1`) "}},"required":[]}]},"response":{"200":{"title":"Nearest","type":"object","properties":{"code":{"type":"string","description":"If the request was successful `Ok` otherwise see the service dependent and general status codes."},"waypoints":{"type":"array","description":"Array of `Waypoint` objects sorted by distance to the input coordinate. ","items":{"type":"object","properties":{"nodes":{"type":"array","description":"Array of OpenStreetMap node ids.","items":{"type":"number"}},"distance":{"type":"number"},"location":{"type":"array","items":{"type":"number"}},"name":{"type":"string"}}}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Optimize = {"metadata":{"allOf":[{"type":"object","properties":{"profile":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Mode of transportation. Only `driving` is supported at the moment. "},"coordinates":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"String of format `{longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...]` or `polyline({polyline}) or polyline6({polyline6})`. <br> You can send up to a maximum of `25` coordinate pairs per request (except `Nearest API` where `coordinates` only supports a single {longitude},{latitude} entry)"}},"required":["profile","coordinates"]},{"type":"object","properties":{"bearings":{"type":"string","examples":["10,20;40,30;30,9"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Accepted Value :- `{bearing};{bearing}[;{bearing} ...]`\nEach `{bearing}` follows the following format: `{value},{range}` `integer 0 .. 360,integer 0 .. 180`"},"radiuses":{"type":"string","examples":["500;200;300"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limits the search to given radius in meters Radiuses array length should be same as coordinates array, each value separated by semi-colon. Accepted Value - `{radius};{radius}[;{radius} ...]`\nEach `{radius}` has following format: `double >= 0` or `unlimited` (default)"},"hints":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Hint from previous request to derive position in street network. Accepted value: `{hint};{hint}[;{hint} ...]`"},"roundtrip":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route is a roundtrip (route returns to first location) . Accepted value: `true` (default), `false`"},"source":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route starts at `any` or `first` coordinate. Accepted value: `any` (default), `first`."},"destination":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route ends at `any` or `last` coordinate. Accepted value: `any` (default), `last`."},"steps":{"type":"string","examples":["true"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route steps for each route leg.\nAccepted value:  `true`, `false` (default)"},"annotations":{"type":"string","default":"false","examples":["false"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returns additional metadata for each coordinate along the route geometry.\nAccepted value: `true`, `false` (default), `nodes`, `distance`, `duration`, `datasources`, `weight`, `speed`"},"geometries":{"type":"string","default":"polyline","examples":["polyline"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Returned route geometry format (influences overview and per step). Accepted value: `polyline` (default), `polyline6`, `geojson`"},"overview":{"type":"string","default":"simplified","examples":["simplified"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all.\nAccepted value: `simplified` (default), `full`, `false`"}},"required":[]}]},"response":{"200":{"title":"Directions","type":"object","x-examples":{"Example 1":{"code":"string","waypoints":[{"distance":0,"location":[0]}],"routes":[]}},"properties":{"code":{"type":"string","description":"If the request was successful `Ok` otherwise see the service dependent and general status codes."},"waypoints":{"type":"array","description":"Object used to describe waypoint on a route.","items":{"type":"object","properties":{"hint":{"type":"string","x-stoplight":{"id":"to7sli9hdk2jt"},"description":"The distance, in meters, from the input coordinate to the snapped coordinate."},"distance":{"type":"number","description":"The distance, in meters, from the input coordinate to the snapped coordinate."},"name":{"type":"string","x-stoplight":{"id":"5vuo71t8c0zy4"},"description":"Unique internal identifier of the segment (ephemeral, not constant over data updates)\n   This can be used on subsequent request to significantly speed up the query and to connect multiple services.\n   E.g. you can use the `hint` value obtained by the `nearest` query as `hint` values for `route` inputs."},"location":{"type":"array","description":"Array that contains the `[longitude, latitude]` pair of the snapped coordinate.","items":{"type":"number"}}}}},"routes":{"title":"Routes","type":"array","description":"Represents a route through (potentially multiple) waypoints.","items":{"title":"Route","type":"object","properties":{"legs":{"type":"array","description":"Represents a route between two waypoints.","items":{"type":"object","properties":{"steps":{"type":"array","description":"A step consists of a maneuver such as a turn or merge, followed\nby a distance of travel along a single way to the subsequent\nstep.\n\nDepends on the `steps` parameter.\n\n| steps        |                                                                       |\n|--------------|-----------------------------------------------------------------------|\n| true         | array of `RouteStep` objects describing the turn-by-turn instructions |\n| false        | empty array                                                           |","items":{"type":"object","properties":{"intersections":{"type":"object","description":"An intersection gives a full representation of any cross-way the path passes bay. For every step, the very first intersection (`intersections[0]`) corresponds to the\nlocation of the StepManeuver. Further intersections are listed for every cross-way until the next turn instruction.","properties":{"location":{"type":"array","description":"A `[longitude, latitude]` pair describing the location of the turn.","items":{"type":"number"}},"in":{"type":"number","x-stoplight":{"id":"lskt57vdr20n9"},"description":"index into bearings/entry array. Used to calculate the bearing just before the turn. Namely, the clockwise angle from true north to the\n  direction of travel immediately before the maneuver/passing the intersection. Bearings are given relative to the intersection. To get the bearing\n  in the direction of driving, the bearing has to be rotated by a value of 180. The value is not supplied for `depart` maneuvers."},"out":{"type":"number","description":"index into the bearings/entry array. Used to extract the bearing just after the turn. Namely, The clockwise angle from true north to the\n  direction of travel immediately after the maneuver/passing the intersection. The value is not supplied for `arrive` maneuvers."},"bearings":{"type":"number","description":"A list of bearing values (e.g. [0,90,180,270]) that are available at the intersection. The bearings describe all available roads at the intersection. Values are between 0-359 (0=true north)"},"entry":{"type":"string","description":"A list of entry flags, corresponding in a 1:1 relationship to the bearings. A value of `true` indicates that the respective road could be entered on a valid route.\n  `false` indicates that the turn onto the respective road would violate a restriction."},"classes":{"type":"array","x-stoplight":{"id":"8eciacki4fjia"},"description":"An array of strings signifying the classes (as specified in the profile) of the road exiting the intersection.","items":{"x-stoplight":{"id":"zl73uiawtykik"},"type":"string"}},"lanes":{"type":"array","x-stoplight":{"id":"cbz5c1js7urfb"},"description":"A `Lane` represents a turn lane at the corresponding turn location.","items":{"x-stoplight":{"id":"2belpw9ad3exo"},"type":"object","properties":{"indications":{"type":"string","x-stoplight":{"id":"c4au3wfzuqkb3"},"description":"An indication (e.g. marking on the road) specifying the turn lane. A road can have multiple indications (e.g. an arrow pointing straight and left). The indications are given in an array, each containing one of the following types. Further indications might be added on without an API version change.\n\n| `value`                | Description                                                                                                               |\n|------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| `none`                 | No dedicated indication is shown.                                                                                         |\n| `uturn`                | An indication signaling the possibility to reverse (i.e. fully bend arrow).                                               |\n| `sharp right`          | An indication indicating a sharp right turn (i.e. strongly bend arrow).                                                   |\n| `right`                | An indication indicating a right turn (i.e. bend arrow).                                                                  |\n| `slight right`         | An indication indicating a slight right turn (i.e. slightly bend arrow).                                                  |\n| `straight`             | No dedicated indication is shown (i.e. straight arrow).                                                                   |\n| `slight left`          | An indication indicating a slight left turn (i.e. slightly bend arrow).                                                   |\n| `left`                 | An indication indicating a left turn (i.e. bend arrow).                                                                   |\n| `sharp left`           | An indication indicating a sharp left turn (i.e. strongly bend arrow).                                                    |"},"valid":{"type":"string","x-stoplight":{"id":"rm2ay92cpk5dn"},"description":"A boolean flag (represented as `string`) indicating whether the lane is a valid choice in the current maneuver."}}}}}},"driving_side":{"type":"string","description":"The legal driving side at the location for this step. Either `left` or `right`."},"geometry":{"type":"string","description":"The unsimplified geometry of the route segment, depending on the `geometries` parameter.\n\n| `geometry` |                                                                    |\n|------------|--------------------------------------------------------------------|\n| polyline   | [polyline](https://www.npmjs.com/package/polyline) with precision 5 in [latitude,longitude] encoding |\n| polyline6  | [polyline](https://www.npmjs.com/package/polyline) with precision 6 in [latitude,longitude] encoding |\n| geojson    | [GeoJSON `LineString`](http://geojson.org/geojson-spec.html#linestring) |"},"duration":{"type":"number","description":"The estimated travel time, in `float` number of seconds."},"distance":{"type":"number","description":"The distance of travel from the maneuver to the subsequent step, in `float` meters."},"name":{"type":"string","description":"The name of the way along which travel proceeds."},"weight":{"type":"number","description":"The calculated weight of the step."},"mode":{"type":"string","description":"A string signifying the mode of transportation."},"maneuver":{"type":"array","description":"A `StepManeuver` object representing the maneuver.","items":{"type":"object","properties":{"bearing_after":{"type":"number","description":"The clockwise angle from true north to the\n  direction of travel immediately after the maneuver. Range 0-359."},"location":{"type":"array","description":"A `[longitude, latitude]` pair describing the location of the turn.","items":{"type":"number"}},"type":{"type":"string","description":"A string indicating the type of maneuver. **new identifiers might be introduced without API change**\n\n| `type`           | Description                                                  |\n|------------------|--------------------------------------------------------------|\n| `turn`           | a basic turn into direction of the `modifier`                |\n| `new name`       | no turn is taken/possible, but the road name changes. The road can take a turn itself, following `modifier`.                  |\n| `depart`         | indicates the departure of the leg                           |\n| `arrive`         | indicates the destination of the leg                         |\n| `merge`          | merge onto a street (e.g. getting on the highway from a ramp, the `modifier specifies the direction of the merge`) |\n| `ramp`           | **Deprecated**. Replaced by `on_ramp` and `off_ramp`.        |\n| `on ramp`        | take a ramp to enter a highway (direction given my `modifier`) |\n| `off ramp`       | take a ramp to exit a highway (direction given my `modifier`)  |\n| `fork`           | take the left/right side at a fork depending on `modifier`   |\n| `end of road`    | road ends in a T intersection turn in direction of `modifier`|\n| `use lane`       | **Deprecated** replaced by lanes on all intersection entries |\n| `continue`       | Turn in direction of `modifier` to stay on the same road     |\n| `roundabout`     | traverse roundabout, if the route leaves the roundabout there will be an additional property `exit` for exit counting. The modifier specifies the direction of entering the roundabout. |\n| `rotary`         | a traffic circle. While very similar to a larger version of a roundabout, it does not necessarily follow roundabout rules for right of way. It can offer `rotary_name` and/or `rotary_pronunciation` parameters (located in the RouteStep object) in addition to the `exit` parameter (located on the StepManeuver object).  |\n| `roundabout turn`| Describes a turn at a small roundabout that should be treated as normal turn. The `modifier` indicates the turn direction. Example instruction: `At the roundabout turn left`. |\n| `notification`   | not an actual turn but a change in the driving conditions. For example the travel mode or classes. If the road takes a turn itself, the `modifier` describes the direction |\n| `exit roundabout`| Describes a maneuver exiting a roundabout (usually preceded by a `roundabout` instruction) |\n| `exit rotary`    | Describes the maneuver exiting a rotary (large named roundabout) |"},"bearing_before":{"type":"number","description":"he clockwise angle from true north to the\n  direction of travel immediately before the maneuver. Range 0-359."},"modifier":{"type":"string","description":"An optional `string` indicating the direction change of the maneuver.\n\n| `modifier`        | Description                               |\n|-------------------|-------------------------------------------|\n| `uturn`           | indicates  reversal of direction          |\n| `sharp right`     | a sharp right turn                        |\n| `right`           | a normal turn to the right                |\n| `slight right`    | a slight turn to the right                |\n| `straight`        | no relevant change in direction           |\n| `slight left`     | a slight turn to the left                 |\n| `left`            | a normal turn to the left                 |\n| `sharp left`      | a sharp turn to the left                  |\n\n The list of turns without a modifier is limited to: `depart/arrive`. If the source/target location is close enough to the `depart/arrive` location, no modifier will be given.\n\n  The meaning depends on the `type` property.\n\n| `type`                 | Description                                                                                                               |\n|------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| `turn`                 | `modifier` indicates the change in direction accomplished through the turn                                                |\n| `depart`/`arrive`      | `modifier` indicates the position of departure point and arrival point in relation to the current direction of travel     |\n\n- `exit` An optional `integer` indicating number of the exit to take. The property exists for the `roundabout` / `rotary` property:\n  Number of the roundabout exit to take. If exit is `undefined` the destination is on the roundabout.\n\n\nNew properties (potentially depending on `type`) may be introduced in the future without an API version change."},"ref":{"type":"string","description":"A reference number or code for the way. Optionally included, if ref data is available for the given way."}}}}}}},"weight":{"type":"number","description":"The calculated weight of the route leg."},"distance":{"type":"number","description":"The distance traveled by this route leg, in `float` meters.\n"},"annotations":{"type":"object","description":"Additional details about each coordinate along the route geometry, with fine-grained information about each segment or node id.\n\n| annotations  |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| true         | An `Annotation` object containing node ids, durations, distances and weights. |\n| false        | `undefined`                                                                   |\n","properties":{"speed":{"type":"array","description":"Convenience field, calculation of `distance / duration` rounded to one decimal place.","items":{"type":"number"}},"metadata":{"type":"object","description":"Metadata related to other annotations.","properties":{"datasource_names":{"type":"array","description":"The names of the datasources used for the speed between each pair of coordinates. `lua profile` is the default profile, other values are the filenames supplied via `--segment-speed-file` to `osrm-contract` or `osrm-customize`.","items":{"type":"string"}}}},"nodes":{"type":"array","description":"The OSM node ID for each coordinate along the route, excluding the first/last user-supplied coordinates.","items":{"type":"number"}},"duration":{"type":"array","description":"The duration between each pair of coordinates, in seconds. Does not include the duration of any turns.","items":{"type":"number"}},"distance":{"type":"array","description":"The distance, in meters, between each pair of coordinates.","items":{"type":"number"}},"weight":{"type":"array","description":"The weights between each pair of coordinates. Does not include any turn costs.","items":{"type":"number"}},"datasources":{"type":"array","description":"The index of the datasource for the speed between each pair of coordinates. `0` is the default profile, other values are supplied via `--segment-speed-file` to `osrm-contract` or `osrm-customize`. String-like names are in the `metadata.datasource_names` array.","items":{"type":"number"}}}},"summary":{"type":"string","description":"Summary of the route taken as `string`. Depends on the `summary` parameter.\n\n| summary      |                                                                       |\n|--------------|-----------------------------------------------------------------------|\n| true         | Names of the two major roads used. Can be empty if route is too short.|\n| false        | empty `string`                                                        |"},"duration":{"type":"string","description":"The estimated travel time, in `float` number of seconds."}}}},"weight_name":{"type":"string"},"geometry":{"type":"string"},"weight":{"type":"number"},"distance":{"type":"number"},"duration":{"type":"number"}}}}},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","x-stoplight":{"id":"b9c442d5d14ed"},"type":"object","properties":{"code":{"type":"string"}},"x-examples":{"Example 1":{"code":"Invalid key"}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Reverse = {"metadata":{"allOf":[{"type":"object","properties":{"lat":{"type":"number","format":"float","examples":[40.748442],"minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38,"$schema":"http://json-schema.org/draft-04/schema#","description":"Latitude of the location to generate an address for."},"lon":{"type":"number","format":"float","examples":[-73.985658],"minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38,"$schema":"http://json-schema.org/draft-04/schema#","description":"Longitude of the location to generate an address for."},"format":{"type":"string","default":"xml","enum":["xml","json","xmlv1.1"],"examples":["json"],"description":"Output Format. Defaults to xml. \n\n> This version (v1) of our Reverse Geocoding API is compatible with OpenStreetMap's Nominatim Geocoder in both JSON & XML formats. However, all our enhancements such as additional datasets and algorithms are supported only in `json` or `xmlv1.1` format options.","$schema":"http://json-schema.org/draft-04/schema#"},"zoom":{"type":"integer","minimum":0,"maximum":18,"default":18,"examples":[18],"$schema":"http://json-schema.org/draft-04/schema#","description":"Level of detail required where `0` is country and `18` is house/building. Defaults to `18`.\nIn terms of address details the zoom levels are as follows:\n\nzoom | address detail\n-----|---------------\n  3   | country\n  5   | state\n  8   | county\n  10  | city\n  14  | suburb\n  16  | street\n  18  | building"},"accept-language":{"type":"string","default":"en","examples":["en"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Preferred language order for showing search results, overrides the value specified in the `Accept-Language` HTTP header. Defaults to `en`. \n\nTo use native language for the response when available, use `accept-language=native`. \n\nEither uses standard <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\" target=\"_blank\">rfc2616 accept-language string</a> or a simple comma separated list of language codes."},"addressdetails":{"type":"integer","enum":[0,1],"default":1,"description":"Include a breakdown of the address of this result into elements. Important components include (but not limited to) country, postcode, state, county, city, town. Only those elements that are available for a given location will be returned.","$schema":"http://json-schema.org/draft-04/schema#"},"normalizeaddress":{"type":"integer","enum":[0,1],"default":0,"description":"Makes parsing of the `address` object easier by returning a predictable and defined list of elements. Defaults to `0` for backward compatibility. We recommend setting this to `1` for new projects.\n\n  Element Name  | Description\n  ------------- | -----------\n  name          | House name or Point of Interest (POI) such as a Cafe or School\n  house_number  | House or Building number\n  road          | Roads, Highways, Freeways, Motorways\n  neighbourhood | Neighbourhoods, Allotments, Quarters, Communities\n  suburb        | Suburbs, Subdivisions\n  island        | Islands, Islets\n  city          | Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets\n  county        | Counties\n  state         | States, Provinces, Regions, State Districts\n  state_code    | State or Province Code\n  postcode      | Postal Codes, Zipcodes\n  country       | Countries, Nation-states\n  country_code  | Country Code - 2 letter (ISO 3166-1 alpha-2)","$schema":"http://json-schema.org/draft-04/schema#"},"normalizecity":{"type":"integer","enum":[0,1],"default":0,"description":"For responses with no `city` value in the address section, the next available element in this order - `city_district`, `locality`, `town`, `borough`, `municipality`, `village`, `hamlet`, `quarter`, `neighbourhood` - from the address section will be normalized to city. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"postaladdress":{"type":"integer","enum":[0,1],"default":0,"description":"Returns address inside the `postaladdress` key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"oceans":{"type":"integer","enum":[0,1],"default":0,"description":"Allows you to specify whether or not the API should return the name of an ocean or sea if the coordinates provided fall within a body of water. By default, this parameter is set to `0` for backward compatibility. When set to `1` and used in conjunction with `addressdetails=1`, the response will contain a limited `address` section consisting of only the `name` and `water` elements, providing the name of the ocean or sea the coordinates correspond to, if the coordinates fall within a body of water.","$schema":"http://json-schema.org/draft-04/schema#"},"showdistance":{"type":"integer","enum":[0,1],"default":0,"description":"Returns the straight line distance (meters) between the input location and the result's location. Value is set in the `distance` key of the response. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"statecode":{"type":"integer","enum":[0,1],"default":0,"description":"Adds state or province code when available to the `state_code` key inside the `address` object. Currently supported for addresses in the USA, Canada and Australia. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"source":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"If this parameter is not specified, LocationIQ uses multiple public and proprietary datasets to return results. If you'd like to restrict results to only OpenStreetMap data, you can set the value of this parameter to `nom`. This will only query our internal cluster of Nominatim servers, and return results. We may still apply some post-processing steps to these results though, so results may vary from the official Nominatim instance."},"namedetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"extratags":{"type":"integer","enum":[0,1],"default":0,"description":"Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_geojson":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in geojson format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_kml":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in kml format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_svg":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in svg format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_text":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results as a WKT. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_threshold":{"type":"number","default":0,"examples":[0.2],"$schema":"http://json-schema.org/draft-04/schema#","description":"When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry."}},"required":["lat","lon"]}]},"response":{"200":{"title":"location-reverse-geocoding","x-stoplight":{"id":"7039d5df8864b"},"type":"object","properties":{"place_id":{"type":"string","description":"Unique identifier for the place.","examples":["223483692"]},"licence":{"type":"string","description":"License information for the data.","examples":["© LocationIQ.com CC BY 4.0, Data © OpenStreetMap contributors, ODbL 1.0"]},"osm_type":{"type":"string","description":"Type of OpenStreetMap object.","examples":["way"]},"osm_id":{"type":"string","description":"Unique identifier for the OpenStreetMap object.","examples":["19301621"]},"lat":{"type":"string","description":"Latitude of the location.","examples":["39.3074555677816"]},"lon":{"type":"string","description":"Longitude of the location.","examples":["-84.2927748515948"]},"display_name":{"type":"string","description":"Formatted address for display.","examples":["3894, Spring Mill Way, Hunter’s Point, Landen, Warren County, Ohio, 45039, United States of America"]},"address":{"anyOf":[{"title":"address","type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","properties":{"house_number":{"type":"string","description":"House number","examples":["3894"]},"road":{"type":"string","description":"Road name","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhood"},"hamlet":{"type":"string","description":"Hamlet"},"suburb":{"type":"string","description":"Suburb"},"village":{"type":"string","description":"Village name","examples":["Landen"]},"town":{"type":"string","description":"Town name"},"city_district":{"type":"string","description":"Administrative area between city level and town level"},"city":{"type":"string","description":"City name","examples":["Landen"]},"region":{"type":"string","description":"Region name"},"county":{"type":"string","description":"County name","examples":["Warren County"]},"state_district":{"type":"string","description":"District name"},"state":{"type":"string","description":"State name","examples":["Ohio"]},"state_code":{"type":"string","description":"State code","examples":["oh"]},"postcode":{"type":"string","description":"Postal code","examples":["45039"]},"country":{"type":"string","description":"Country name","examples":["United States of America"]},"country_code":{"type":"string","description":"Country code","examples":["us"]},"name":{"type":"string","description":"Name of the entity/road in the given location"},"water":{"type":"string","x-stoplight":{"id":"7nunw3epqpcqo"},"description":"The name of an ocean or sea, if the location falls within a body of water outside any country's administrative regions."}},"x-examples":{"Example 1":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Result from Ocean":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Example 2":{"name":"South Pacific Ocean","water":"South Pacific Ocean"}}},{"title":"address-normalized","x-stoplight":{"id":"q798lnglnqkb4"},"type":"object","description":"The default address section returns a wide range of elements - from common ones such as `road` and `country` to obscure ones such as `hamlet`, `cycleway`, `park`. This was done to maintain backward compatibility with OpenStreetMap's Nominatim. To make parsing easier for developers, the `normalizeaddress` parameter rolls up elements in the `address` section of the response to the list of elements defined below.\n","properties":{"name":{"type":"string","description":"House name or Point of Interest (POI)"},"house_number":{"type":"string","description":"House or Building number","examples":["3894"]},"road":{"type":"string","description":"Roads, Highways, Freeways, Motorways","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhoods, Allotments, Quarters, Communities"},"suburb":{"type":"string","description":"Suburbs, Subdivisions"},"island":{"type":"string","description":"Islands, Islets"},"city":{"type":"string","description":"Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets","examples":["Landen"]},"county":{"type":"string","description":"Counties","examples":["Warren County"]},"state":{"type":"string","description":"States, Provinces, Regions, State Districts","examples":["Ohio"]},"state_code":{"type":"string","description":"State or Province Code","examples":["oh"]},"postcode":{"type":"string","description":"Postal Codes, Zipcodes","examples":["45039"]},"country":{"type":"string","description":"Countries, Nation-states","examples":["United States of America"]},"country_code":{"type":"string","description":"Country Code - 2 letter (ISO 3166-1 alpha-2)","examples":["us"]}},"x-examples":{"Example 1":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Manhattan Community Board 5","suburb":"Manhattan","city":"New York","county":"New York County","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"},"Result from Ocean":{"name":"South Pacific Ocean"},"Example 2":{"name":"South Pacific Ocean"}}}]},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string","examples":["39.307405567782"]}},"distance":{"type":"number","x-examples":{"Example 1":23},"format":"double","description":"The straight line distance (meters) between the input location and the result's location. Returned when `showdistance=1` is set in the request.","minimum":-1.7976931348623157e+308,"maximum":1.7976931348623157e+308},"namedetails":{"type":"object","x-examples":{"Example 1":{"name":"Empire State Building","name:en":"Empire State Building","name:es":"Edificio Empire State","name:he":"בניין אמפייר סטייט","name:hi":"एम्पायर स्टेट बिल्डिंग","name:ko":"엠파이어 스테이트 빌딩","name:ru":"Эмпайр-Стейт-Билдинг","name:uk":"Емпайр-Стейт-Білдінг","name:zh":"帝国大厦"}},"properties":{"name":{"type":"string"}},"description":"The dictionary with full list of available names including ref etc. Returned when `namedetails=1` is set in the request.\n"},"extratags":{"type":"object","x-examples":{"Example 1":{"ele":"15","height":"443.2","wikidata":"Q9188","wikipedia":"en:Empire State Building","start_date":"1931","wheelchair":"yes","building:use":"office","opening_hours":"Mo-Su 08:00-02:00","building:levels":"102","construction_date":"1930-1931"}},"description":"The dictionary with additional useful tags like website or maxspeed. Returned when `extratags=1` is set in the request.\n","additionalProperties":true},"geojson":{"type":"object","properties":{"type":{"type":"string","examples":["house"]},"coordinates":{"type":"array","items":{"type":"number"}}},"x-examples":{"Example 1":{"type":"Polygon","coordinates":[[[-73.9865012,40.748491],[-73.9851602,40.7479255],[-73.9848166,40.7483931],[-73.9861574,40.7489585],[-73.9863252,40.7487301],[-73.9863554,40.748689],[-73.9864839,40.7485145],[-73.9865012,40.748491]]]}},"description":"Output geometry of results in geojson format. Returned when `polygon_geojson=1` is set in the request."},"geokml":{"type":"string","x-examples":{"Example 1":"<Polygon><outerBoundaryIs><LinearRing><coordinates>-73.986501200000006,40.748491000000001 -73.985160199999996,40.747925500000001 -73.984816600000002,40.748393100000001 -73.986157399999996,40.748958500000001 -73.986325199999996,40.748730100000003 -73.986355399999994,40.748688999999999 -73.986483899999996,40.748514499999999 -73.986501200000006,40.748491000000001</coordinates></LinearRing></outerBoundaryIs></Polygon>"},"description":"Output geometry of results in kml format. Returned when `polygon_kml=1` is set in the request."},"svg":{"type":"string","x-examples":{"Example 1":"M -73.9865012 -40.748491 L -73.9851602 -40.7479255 -73.9848166 -40.7483931 -73.9861574 -40.7489585 -73.9863252 -40.7487301 -73.9863554 -40.748689 -73.9864839 -40.7485145 Z"},"description":"Output geometry of results in svg format. Returned when `polygon_svg=1` is set in the request."},"geotext":{"type":"string","x-examples":{"Example 1":"POLYGON((-73.9865012 40.748491,-73.9851602 40.7479255,-73.9848166 40.7483931,-73.9861574 40.7489585,-73.9863252 40.7487301,-73.9863554 40.748689,-73.9864839 40.7485145,-73.9865012 40.748491))"},"title":"","description":"Output geometry of results as a WKT. Returned when `polygon_text=1` is set in the request."},"postaladdress":{"title":"postaladdress","x-stoplight":{"id":"zq4zgnef9uq9n"},"type":"string","description":"Returns address specifically formatted for each country. Returned when `postaladdress` is set in the request","x-examples":{"Example 1":"5, Avenue Anatole France, 75007, Paris, France"}}},"required":["place_id","licence","lat","lon","display_name","boundingbox"],"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const Search = {"metadata":{"allOf":[{"type":"object","properties":{"q":{"type":"string","examples":["Empire State Building"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Free-form query string to search for. Commas are optional, but improves performance by reducing the complexity of the search."},"format":{"type":"string","default":"xml","enum":["xml","json","xmlv1.1"],"examples":["json"],"description":"Output Format. Defaults to xml. \n\n> This version (v1) of our Reverse Geocoding API is compatible with OpenStreetMap's Nominatim Geocoder in both JSON & XML formats. However, all our enhancements such as additional datasets and algorithms are supported only in `json` or `xmlv1.1` format options.","$schema":"http://json-schema.org/draft-04/schema#"},"addressdetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a breakdown of the address of this result into elements. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"statecode":{"type":"integer","enum":[0,1],"default":0,"description":"Adds state or province code when available to the `state_code` key inside the `address` object. Currently supported for addresses in the USA, Canada and Australia. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"viewbox":{"type":"string","examples":["-73.9965012,40.7489255,-73.9858166,40.7499585"],"$schema":"http://json-schema.org/draft-04/schema#","description":"The preferred area to find search results. Any two corner points of the box - `max_lon,max_lat,min_lon,min_lat` or `min_lon,min_lat,max_lon,max_lat` - are accepted in any order as long as they span a real box. To restrict results to those within the viewbox, use along with the `bounded` option."},"bounded":{"type":"integer","enum":[0,1],"$schema":"http://json-schema.org/draft-04/schema#","description":"Restrict result to items contained within the bounds specified in the `viewbox` parameter. Defaults to `0`."},"limit":{"type":"integer","minimum":1,"maximum":50,"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit the number of returned results. Accepted value: `1` to `50`. Defaults to `10`."},"accept-language":{"type":"string","default":"en","examples":["en"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Preferred language order for showing search results, overrides the value specified in the `Accept-Language` HTTP header. Defaults to `en`. \n\nTo use native language for the response when available, use `accept-language=native`. \n\nEither uses standard <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\" target=\"_blank\">rfc2616 accept-language string</a> or a simple comma separated list of language codes."},"countrycodes":{"type":"string","examples":["us,ca,gb"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit search results to a specific country or a comma-separated list of countries. Should be the ISO 3166-1 alpha-2 code(s)."},"normalizeaddress":{"type":"integer","enum":[0,1],"default":0,"description":"Makes parsing of the `address` object easier by returning a predictable and defined list of elements. Defaults to `0` for backward compatibility. We recommend setting this to `1` for new projects.\n\n  Element Name  | Description\n  ------------- | -----------\n  name          | House name or Point of Interest (POI) such as a Cafe or School\n  house_number  | House or Building number\n  road          | Roads, Highways, Freeways, Motorways\n  neighbourhood | Neighbourhoods, Allotments, Quarters, Communities\n  suburb        | Suburbs, Subdivisions\n  island        | Islands, Islets\n  city          | Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets\n  county        | Counties\n  state         | States, Provinces, Regions, State Districts\n  state_code    | State or Province Code\n  postcode      | Postal Codes, Zipcodes\n  country       | Countries, Nation-states\n  country_code  | Country Code - 2 letter (ISO 3166-1 alpha-2)","$schema":"http://json-schema.org/draft-04/schema#"},"normalizecity":{"type":"integer","enum":[0,1],"default":0,"description":"For responses with no `city` value in the address section, the next available element in this order - `city_district`, `locality`, `town`, `borough`, `municipality`, `village`, `hamlet`, `quarter`, `neighbourhood` - from the address section will be normalized to city. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"postaladdress":{"type":"integer","enum":[0,1],"default":0,"description":"Returns address inside the `postaladdress` key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"matchquality":{"type":"integer","enum":[0,1],"default":0,"description":"Returns additional information about quality of the result in a `matchquality` object. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"source":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"If this parameter is not specified, LocationIQ uses multiple public and proprietary datasets to return results. If you'd like to restrict results to only OpenStreetMap data, you can set the value of this parameter to `nom`. This will only query our internal cluster of Nominatim servers, and return results. We may still apply some post-processing steps to these results though, so results may vary from the official Nominatim instance."},"normalizeimportance":{"type":"integer","default":1,"enum":[0,1],"description":"When this parameter is absent or set to `1`, the `importance` value(s) in the API response is limited to the range of 0 to 1. Values outside this range are adjusted to the nearest boundary (0 or 1). Setting `normalizeimportance` to `0` allows the importance value to be lower or higher than the specified range of 0 to 1. Defaults to `1`","$schema":"http://json-schema.org/draft-04/schema#"},"dedupe":{"type":"integer","enum":[0,1],"default":1,"description":"Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Our Geocoder will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to `1`. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested.","$schema":"http://json-schema.org/draft-04/schema#"},"namedetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"extratags":{"type":"integer","enum":[0,1],"default":0,"description":"Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_geojson":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in geojson format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_kml":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in kml format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_svg":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in svg format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_text":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results as a WKT. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"json_callback":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Wrap json output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats."},"polygon_threshold":{"type":"number","default":0,"examples":[0.2],"$schema":"http://json-schema.org/draft-04/schema#","description":"When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry."}},"required":["q"]}]},"response":{"200":{"title":"location-forward-geocoding","x-stoplight":{"id":"360vfacsuwhfx"},"type":"array","items":{"type":"object","properties":{"place_id":{"type":"string","description":"Unique identifier for the place."},"licence":{"type":"string","description":"License information for the data."},"osm_type":{"type":"string","description":"Type of OpenStreetMap object."},"osm_id":{"type":"string","description":"Unique identifier for the OpenStreetMap object."},"lat":{"type":"string","description":"Latitude of the location."},"lon":{"type":"string","description":"Longitude of the location."},"display_name":{"type":"string","description":"Formatted address for display."},"class":{"type":"string","description":"The category of this result"},"type":{"type":"string","description":"The 'type' of the class/category of this result"},"importance":{"type":"number","description":"Calculated importance of this result compared to the search query the user has provided. Ranges between 0 and 1.","format":"float","minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38},"address":{"anyOf":[{"title":"address","type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","properties":{"house_number":{"type":"string","description":"House number","examples":["3894"]},"road":{"type":"string","description":"Road name","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhood"},"hamlet":{"type":"string","description":"Hamlet"},"suburb":{"type":"string","description":"Suburb"},"village":{"type":"string","description":"Village name","examples":["Landen"]},"town":{"type":"string","description":"Town name"},"city_district":{"type":"string","description":"Administrative area between city level and town level"},"city":{"type":"string","description":"City name","examples":["Landen"]},"region":{"type":"string","description":"Region name"},"county":{"type":"string","description":"County name","examples":["Warren County"]},"state_district":{"type":"string","description":"District name"},"state":{"type":"string","description":"State name","examples":["Ohio"]},"state_code":{"type":"string","description":"State code","examples":["oh"]},"postcode":{"type":"string","description":"Postal code","examples":["45039"]},"country":{"type":"string","description":"Country name","examples":["United States of America"]},"country_code":{"type":"string","description":"Country code","examples":["us"]},"name":{"type":"string","description":"Name of the entity/road in the given location"},"water":{"type":"string","x-stoplight":{"id":"7nunw3epqpcqo"},"description":"The name of an ocean or sea, if the location falls within a body of water outside any country's administrative regions."}},"x-examples":{"Example 1":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Result from Ocean":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Example 2":{"name":"South Pacific Ocean","water":"South Pacific Ocean"}}},{"title":"address-normalized","x-stoplight":{"id":"q798lnglnqkb4"},"type":"object","description":"The default address section returns a wide range of elements - from common ones such as `road` and `country` to obscure ones such as `hamlet`, `cycleway`, `park`. This was done to maintain backward compatibility with OpenStreetMap's Nominatim. To make parsing easier for developers, the `normalizeaddress` parameter rolls up elements in the `address` section of the response to the list of elements defined below.\n","properties":{"name":{"type":"string","description":"House name or Point of Interest (POI)"},"house_number":{"type":"string","description":"House or Building number","examples":["3894"]},"road":{"type":"string","description":"Roads, Highways, Freeways, Motorways","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhoods, Allotments, Quarters, Communities"},"suburb":{"type":"string","description":"Suburbs, Subdivisions"},"island":{"type":"string","description":"Islands, Islets"},"city":{"type":"string","description":"Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets","examples":["Landen"]},"county":{"type":"string","description":"Counties","examples":["Warren County"]},"state":{"type":"string","description":"States, Provinces, Regions, State Districts","examples":["Ohio"]},"state_code":{"type":"string","description":"State or Province Code","examples":["oh"]},"postcode":{"type":"string","description":"Postal Codes, Zipcodes","examples":["45039"]},"country":{"type":"string","description":"Countries, Nation-states","examples":["United States of America"]},"country_code":{"type":"string","description":"Country Code - 2 letter (ISO 3166-1 alpha-2)","examples":["us"]}},"x-examples":{"Example 1":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Manhattan Community Board 5","suburb":"Manhattan","city":"New York","county":"New York County","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"},"Result from Ocean":{"name":"South Pacific Ocean"},"Example 2":{"name":"South Pacific Ocean"}}}]},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string"}},"namedetails":{"type":"object","x-examples":{"Example 1":{"name":"Empire State Building","name:en":"Empire State Building","name:es":"Edificio Empire State","name:he":"בניין אמפייר סטייט","name:hi":"एम्पायर स्टेट बिल्डिंग","name:ko":"엠파이어 스테이트 빌딩","name:ru":"Эмпайр-Стейт-Билдинг","name:uk":"Емпайр-Стейт-Білдінг","name:zh":"帝国大厦"}},"properties":{"name":{"type":"string"}},"description":"The dictionary with full list of available names including ref etc. Returned when `namedetails=1` is set in the request.\n"},"extratags":{"type":"object","x-examples":{"Example 1":{"ele":"15","height":"443.2","wikidata":"Q9188","wikipedia":"en:Empire State Building","start_date":"1931","wheelchair":"yes","building:use":"office","opening_hours":"Mo-Su 08:00-02:00","building:levels":"102","construction_date":"1930-1931"}},"description":"The dictionary with additional useful tags like website or maxspeed. Returned when `extratags=1` is set in the request.\n","additionalProperties":true},"geojson":{"type":"object","properties":{"type":{"type":"string"},"coordinates":{"type":"array","items":{"type":"number"}}},"x-examples":{"Example 1":{"type":"Polygon","coordinates":[[[-73.9865012,40.748491],[-73.9851602,40.7479255],[-73.9848166,40.7483931],[-73.9861574,40.7489585],[-73.9863252,40.7487301],[-73.9863554,40.748689],[-73.9864839,40.7485145],[-73.9865012,40.748491]]]}},"description":"Output geometry of results in geojson format. Returned when `polygon_geojson=1` is set in the request."},"geokml":{"type":"string","x-examples":{"Example 1":"<Polygon><outerBoundaryIs><LinearRing><coordinates>-73.986501200000006,40.748491000000001 -73.985160199999996,40.747925500000001 -73.984816600000002,40.748393100000001 -73.986157399999996,40.748958500000001 -73.986325199999996,40.748730100000003 -73.986355399999994,40.748688999999999 -73.986483899999996,40.748514499999999 -73.986501200000006,40.748491000000001</coordinates></LinearRing></outerBoundaryIs></Polygon>"},"description":"Output geometry of results in kml format. Returned when `polygon_kml=1` is set in the request."},"svg":{"type":"string","x-examples":{"Example 1":"M -73.9865012 -40.748491 L -73.9851602 -40.7479255 -73.9848166 -40.7483931 -73.9861574 -40.7489585 -73.9863252 -40.7487301 -73.9863554 -40.748689 -73.9864839 -40.7485145 Z"},"description":"Output geometry of results in svg format. Returned when `polygon_svg=1` is set in the request."},"geotext":{"type":"string","x-examples":{"Example 1":"POLYGON((-73.9865012 40.748491,-73.9851602 40.7479255,-73.9848166 40.7483931,-73.9861574 40.7489585,-73.9863252 40.7487301,-73.9863554 40.748689,-73.9864839 40.7485145,-73.9865012 40.748491))"},"title":"","description":"Output geometry of results as a WKT. Returned when `polygon_text=1` is set in the request."},"icon":{"type":"string","x-stoplight":{"id":"udpck9wsvlgou"},"description":"The URL of an icon representing this result, if applicable."},"matchquality":{"type":"object","x-examples":{"Example 1":{"matchcode":"exact","matchtype":"point","matchlevel":"venue"}},"description":"An additional object `matchquality` for every result in the response, containing the following elements: `matchcode`, `matchtype`, `matchlevel`.","properties":{"matchcode":{"title":"matchcode","x-stoplight":{"id":"keiun4kwm07z4"},"type":"string","description":"Specifies the quality of the returned address.\n\n matchcode  | description\n ------------|---------------\n  exact      | The result matches the input query with a high level of probability.\n  fallback   | The result does not exactly match the input but is closely related to it provided there is direct a heierarchial relation.\n  approximate| The result matches the input query with a medium to low level of probability.\n"},"matchtype":{"title":"matchtype","x-stoplight":{"id":"20ejxqp1iy2wr"},"type":"string","description":"Specifies quality of the returned location match\n  \n  matchtype    | description\n --------------|---------------\n  point        | The coordinate returned is a point address, typically with rooftop accuracy.\n  centroid     | The coordinate returned is a centroid of a road or administrative boundary.\n  interpolated | The coordinate returned is a point determined by interpolation."},"matchlevel":{"type":"string","x-examples":{"Example 1":"venue"},"description":"Specifies the most granular address element that matches the geocoding query.\n\n matchlevel       | details\n -----------------|---------------\n  venue           | The returned address is of a Point of Interest (PoI) level.\n  building        | The returned address is of a house level.\n  street          | The returned address is on a street level.\n  neighbourhood   | The returned address is on a neighbourhood level.\n  island          | The returned address is on a island level.\n  borough         | The returned address is on a borough level.\n  city            | The returned address is on a city level.\n  county          | The returned address is on a county level.\n  state           | The returned address is on a state level.\n  country         | The returned address is on a country level.\n  marine          | The returned address is on a marine level.\n  postalcode      | The returned address is on a postalcode level."}}},"postaladdress":{"title":"postaladdress","x-stoplight":{"id":"zq4zgnef9uq9n"},"type":"string","description":"Returns address specifically formatted for each country. Returned when `postaladdress` is set in the request","x-examples":{"Example 1":"5, Avenue Anatole France, 75007, Paris, France"}}},"required":["place_id","licence","lat","lon","display_name","boundingbox"]},"description":"","x-examples":{"Example 1":[{"place_id":"223483692","licence":"© LocationIQ.com CC BY 4.0, Data © OpenStreetMap contributors, ODbL 1.0","osm_type":"way","osm_id":"19301621","boundingbox":["39.307405567782","39.307505567782","-84.292824851595","-84.292724851595"],"lat":"39.3074555677816","lon":"-84.2927748515948","display_name":"3894, Spring Mill Way, Hunter’s Point, Landen, Warren County, Ohio, 45039, United States of America","class":"place","type":"house","importance":0.62025,"address":{"name":"Empire State Building","house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","city":"Landen"}}]},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const SearchPostalcode = {"metadata":{"allOf":[{"type":"object","properties":{"postalcode":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Use this to indicate the postal or ZIP code, aiding in pinpointing the exact area within a city or locality."},"countrycodes":{"type":"string","examples":["us,ca,gb"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit search results to a specific country or a comma-separated list of countries. Should be the ISO 3166-1 alpha-2 code(s)."},"format":{"type":"string","default":"xml","enum":["xml","json","xmlv1.1"],"examples":["json"],"description":"Output Format. Defaults to xml. \n\n> This version (v1) of our Reverse Geocoding API is compatible with OpenStreetMap's Nominatim Geocoder in both JSON & XML formats. However, all our enhancements such as additional datasets and algorithms are supported only in `json` or `xmlv1.1` format options.","$schema":"http://json-schema.org/draft-04/schema#"},"addressdetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a breakdown of the address of this result into elements. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"statecode":{"type":"integer","enum":[0,1],"default":0,"description":"Adds state or province code when available to the `state_code` key inside the `address` object. Currently supported for addresses in the USA, Canada and Australia. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"viewbox":{"type":"string","examples":["-73.9965012,40.7489255,-73.9858166,40.7499585"],"$schema":"http://json-schema.org/draft-04/schema#","description":"The preferred area to find search results. Any two corner points of the box - `max_lon,max_lat,min_lon,min_lat` or `min_lon,min_lat,max_lon,max_lat` - are accepted in any order as long as they span a real box. To restrict results to those within the viewbox, use along with the `bounded` option."},"bounded":{"type":"integer","enum":[0,1],"$schema":"http://json-schema.org/draft-04/schema#","description":"Restrict result to items contained within the bounds specified in the `viewbox` parameter. Defaults to `0`."},"limit":{"type":"integer","minimum":1,"maximum":50,"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit the number of returned results. Accepted value: `1` to `50`. Defaults to `10`."},"accept-language":{"type":"string","default":"en","examples":["en"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Preferred language order for showing search results, overrides the value specified in the `Accept-Language` HTTP header. Defaults to `en`. \n\nTo use native language for the response when available, use `accept-language=native`. \n\nEither uses standard <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\" target=\"_blank\">rfc2616 accept-language string</a> or a simple comma separated list of language codes."},"normalizeaddress":{"type":"integer","enum":[0,1],"default":0,"description":"Makes parsing of the `address` object easier by returning a predictable and defined list of elements. Defaults to `0` for backward compatibility. We recommend setting this to `1` for new projects.\n\n  Element Name  | Description\n  ------------- | -----------\n  name          | House name or Point of Interest (POI) such as a Cafe or School\n  house_number  | House or Building number\n  road          | Roads, Highways, Freeways, Motorways\n  neighbourhood | Neighbourhoods, Allotments, Quarters, Communities\n  suburb        | Suburbs, Subdivisions\n  island        | Islands, Islets\n  city          | Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets\n  county        | Counties\n  state         | States, Provinces, Regions, State Districts\n  state_code    | State or Province Code\n  postcode      | Postal Codes, Zipcodes\n  country       | Countries, Nation-states\n  country_code  | Country Code - 2 letter (ISO 3166-1 alpha-2)","$schema":"http://json-schema.org/draft-04/schema#"},"normalizecity":{"type":"integer","enum":[0,1],"default":0,"description":"For responses with no `city` value in the address section, the next available element in this order - `city_district`, `locality`, `town`, `borough`, `municipality`, `village`, `hamlet`, `quarter`, `neighbourhood` - from the address section will be normalized to city. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"postaladdress":{"type":"integer","enum":[0,1],"default":0,"description":"Returns address inside the `postaladdress` key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"matchquality":{"type":"integer","enum":[0,1],"default":0,"description":"Returns additional information about quality of the result in a `matchquality` object. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"source":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"If this parameter is not specified, LocationIQ uses multiple public and proprietary datasets to return results. If you'd like to restrict results to only OpenStreetMap data, you can set the value of this parameter to `nom`. This will only query our internal cluster of Nominatim servers, and return results. We may still apply some post-processing steps to these results though, so results may vary from the official Nominatim instance."},"normalizeimportance":{"type":"integer","default":1,"enum":[0,1],"description":"When this parameter is absent or set to `1`, the `importance` value(s) in the API response is limited to the range of 0 to 1. Values outside this range are adjusted to the nearest boundary (0 or 1). Setting `normalizeimportance` to `0` allows the importance value to be lower or higher than the specified range of 0 to 1. Defaults to `1`","$schema":"http://json-schema.org/draft-04/schema#"},"dedupe":{"type":"integer","enum":[0,1],"default":1,"description":"Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Our Geocoder will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to `1`. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested.","$schema":"http://json-schema.org/draft-04/schema#"},"namedetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"extratags":{"type":"integer","enum":[0,1],"default":0,"description":"Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_geojson":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in geojson format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_kml":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in kml format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_svg":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in svg format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_text":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results as a WKT. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"json_callback":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Wrap json output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats."}},"required":["postalcode"]}]},"response":{"200":{"title":"location-forward-geocoding","x-stoplight":{"id":"360vfacsuwhfx"},"type":"array","items":{"type":"object","properties":{"place_id":{"type":"string","description":"Unique identifier for the place."},"licence":{"type":"string","description":"License information for the data."},"osm_type":{"type":"string","description":"Type of OpenStreetMap object."},"osm_id":{"type":"string","description":"Unique identifier for the OpenStreetMap object."},"lat":{"type":"string","description":"Latitude of the location."},"lon":{"type":"string","description":"Longitude of the location."},"display_name":{"type":"string","description":"Formatted address for display."},"class":{"type":"string","description":"The category of this result"},"type":{"type":"string","description":"The 'type' of the class/category of this result"},"importance":{"type":"number","description":"Calculated importance of this result compared to the search query the user has provided. Ranges between 0 and 1.","format":"float","minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38},"address":{"anyOf":[{"title":"address","type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","properties":{"house_number":{"type":"string","description":"House number","examples":["3894"]},"road":{"type":"string","description":"Road name","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhood"},"hamlet":{"type":"string","description":"Hamlet"},"suburb":{"type":"string","description":"Suburb"},"village":{"type":"string","description":"Village name","examples":["Landen"]},"town":{"type":"string","description":"Town name"},"city_district":{"type":"string","description":"Administrative area between city level and town level"},"city":{"type":"string","description":"City name","examples":["Landen"]},"region":{"type":"string","description":"Region name"},"county":{"type":"string","description":"County name","examples":["Warren County"]},"state_district":{"type":"string","description":"District name"},"state":{"type":"string","description":"State name","examples":["Ohio"]},"state_code":{"type":"string","description":"State code","examples":["oh"]},"postcode":{"type":"string","description":"Postal code","examples":["45039"]},"country":{"type":"string","description":"Country name","examples":["United States of America"]},"country_code":{"type":"string","description":"Country code","examples":["us"]},"name":{"type":"string","description":"Name of the entity/road in the given location"},"water":{"type":"string","x-stoplight":{"id":"7nunw3epqpcqo"},"description":"The name of an ocean or sea, if the location falls within a body of water outside any country's administrative regions."}},"x-examples":{"Example 1":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Result from Ocean":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Example 2":{"name":"South Pacific Ocean","water":"South Pacific Ocean"}}},{"title":"address-normalized","x-stoplight":{"id":"q798lnglnqkb4"},"type":"object","description":"The default address section returns a wide range of elements - from common ones such as `road` and `country` to obscure ones such as `hamlet`, `cycleway`, `park`. This was done to maintain backward compatibility with OpenStreetMap's Nominatim. To make parsing easier for developers, the `normalizeaddress` parameter rolls up elements in the `address` section of the response to the list of elements defined below.\n","properties":{"name":{"type":"string","description":"House name or Point of Interest (POI)"},"house_number":{"type":"string","description":"House or Building number","examples":["3894"]},"road":{"type":"string","description":"Roads, Highways, Freeways, Motorways","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhoods, Allotments, Quarters, Communities"},"suburb":{"type":"string","description":"Suburbs, Subdivisions"},"island":{"type":"string","description":"Islands, Islets"},"city":{"type":"string","description":"Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets","examples":["Landen"]},"county":{"type":"string","description":"Counties","examples":["Warren County"]},"state":{"type":"string","description":"States, Provinces, Regions, State Districts","examples":["Ohio"]},"state_code":{"type":"string","description":"State or Province Code","examples":["oh"]},"postcode":{"type":"string","description":"Postal Codes, Zipcodes","examples":["45039"]},"country":{"type":"string","description":"Countries, Nation-states","examples":["United States of America"]},"country_code":{"type":"string","description":"Country Code - 2 letter (ISO 3166-1 alpha-2)","examples":["us"]}},"x-examples":{"Example 1":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Manhattan Community Board 5","suburb":"Manhattan","city":"New York","county":"New York County","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"},"Result from Ocean":{"name":"South Pacific Ocean"},"Example 2":{"name":"South Pacific Ocean"}}}]},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string"}},"namedetails":{"type":"object","x-examples":{"Example 1":{"name":"Empire State Building","name:en":"Empire State Building","name:es":"Edificio Empire State","name:he":"בניין אמפייר סטייט","name:hi":"एम्पायर स्टेट बिल्डिंग","name:ko":"엠파이어 스테이트 빌딩","name:ru":"Эмпайр-Стейт-Билдинг","name:uk":"Емпайр-Стейт-Білдінг","name:zh":"帝国大厦"}},"properties":{"name":{"type":"string"}},"description":"The dictionary with full list of available names including ref etc. Returned when `namedetails=1` is set in the request.\n"},"extratags":{"type":"object","x-examples":{"Example 1":{"ele":"15","height":"443.2","wikidata":"Q9188","wikipedia":"en:Empire State Building","start_date":"1931","wheelchair":"yes","building:use":"office","opening_hours":"Mo-Su 08:00-02:00","building:levels":"102","construction_date":"1930-1931"}},"description":"The dictionary with additional useful tags like website or maxspeed. Returned when `extratags=1` is set in the request.\n","additionalProperties":true},"geojson":{"type":"object","properties":{"type":{"type":"string"},"coordinates":{"type":"array","items":{"type":"number"}}},"x-examples":{"Example 1":{"type":"Polygon","coordinates":[[[-73.9865012,40.748491],[-73.9851602,40.7479255],[-73.9848166,40.7483931],[-73.9861574,40.7489585],[-73.9863252,40.7487301],[-73.9863554,40.748689],[-73.9864839,40.7485145],[-73.9865012,40.748491]]]}},"description":"Output geometry of results in geojson format. Returned when `polygon_geojson=1` is set in the request."},"geokml":{"type":"string","x-examples":{"Example 1":"<Polygon><outerBoundaryIs><LinearRing><coordinates>-73.986501200000006,40.748491000000001 -73.985160199999996,40.747925500000001 -73.984816600000002,40.748393100000001 -73.986157399999996,40.748958500000001 -73.986325199999996,40.748730100000003 -73.986355399999994,40.748688999999999 -73.986483899999996,40.748514499999999 -73.986501200000006,40.748491000000001</coordinates></LinearRing></outerBoundaryIs></Polygon>"},"description":"Output geometry of results in kml format. Returned when `polygon_kml=1` is set in the request."},"svg":{"type":"string","x-examples":{"Example 1":"M -73.9865012 -40.748491 L -73.9851602 -40.7479255 -73.9848166 -40.7483931 -73.9861574 -40.7489585 -73.9863252 -40.7487301 -73.9863554 -40.748689 -73.9864839 -40.7485145 Z"},"description":"Output geometry of results in svg format. Returned when `polygon_svg=1` is set in the request."},"geotext":{"type":"string","x-examples":{"Example 1":"POLYGON((-73.9865012 40.748491,-73.9851602 40.7479255,-73.9848166 40.7483931,-73.9861574 40.7489585,-73.9863252 40.7487301,-73.9863554 40.748689,-73.9864839 40.7485145,-73.9865012 40.748491))"},"title":"","description":"Output geometry of results as a WKT. Returned when `polygon_text=1` is set in the request."},"icon":{"type":"string","x-stoplight":{"id":"udpck9wsvlgou"},"description":"The URL of an icon representing this result, if applicable."},"matchquality":{"type":"object","x-examples":{"Example 1":{"matchcode":"exact","matchtype":"point","matchlevel":"venue"}},"description":"An additional object `matchquality` for every result in the response, containing the following elements: `matchcode`, `matchtype`, `matchlevel`.","properties":{"matchcode":{"title":"matchcode","x-stoplight":{"id":"keiun4kwm07z4"},"type":"string","description":"Specifies the quality of the returned address.\n\n matchcode  | description\n ------------|---------------\n  exact      | The result matches the input query with a high level of probability.\n  fallback   | The result does not exactly match the input but is closely related to it provided there is direct a heierarchial relation.\n  approximate| The result matches the input query with a medium to low level of probability.\n"},"matchtype":{"title":"matchtype","x-stoplight":{"id":"20ejxqp1iy2wr"},"type":"string","description":"Specifies quality of the returned location match\n  \n  matchtype    | description\n --------------|---------------\n  point        | The coordinate returned is a point address, typically with rooftop accuracy.\n  centroid     | The coordinate returned is a centroid of a road or administrative boundary.\n  interpolated | The coordinate returned is a point determined by interpolation."},"matchlevel":{"type":"string","x-examples":{"Example 1":"venue"},"description":"Specifies the most granular address element that matches the geocoding query.\n\n matchlevel       | details\n -----------------|---------------\n  venue           | The returned address is of a Point of Interest (PoI) level.\n  building        | The returned address is of a house level.\n  street          | The returned address is on a street level.\n  neighbourhood   | The returned address is on a neighbourhood level.\n  island          | The returned address is on a island level.\n  borough         | The returned address is on a borough level.\n  city            | The returned address is on a city level.\n  county          | The returned address is on a county level.\n  state           | The returned address is on a state level.\n  country         | The returned address is on a country level.\n  marine          | The returned address is on a marine level.\n  postalcode      | The returned address is on a postalcode level."}}},"postaladdress":{"title":"postaladdress","x-stoplight":{"id":"zq4zgnef9uq9n"},"type":"string","description":"Returns address specifically formatted for each country. Returned when `postaladdress` is set in the request","x-examples":{"Example 1":"5, Avenue Anatole France, 75007, Paris, France"}}},"required":["place_id","licence","lat","lon","display_name","boundingbox"]},"description":"","x-examples":{"Example 1":[{"place_id":"223483692","licence":"© LocationIQ.com CC BY 4.0, Data © OpenStreetMap contributors, ODbL 1.0","osm_type":"way","osm_id":"19301621","boundingbox":["39.307405567782","39.307505567782","-84.292824851595","-84.292724851595"],"lat":"39.3074555677816","lon":"-84.2927748515948","display_name":"3894, Spring Mill Way, Hunter’s Point, Landen, Warren County, Ohio, 45039, United States of America","class":"place","type":"house","importance":0.62025,"address":{"name":"Empire State Building","house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","city":"Landen"}}]},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
const SearchStructured = {"metadata":{"allOf":[{"type":"object","properties":{"street":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Pass this parameter to specify the street address (building number, name and road)."},"city":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Include this parameter to provide the city information for geocoding."},"county":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Use this to indicate the county or administrative region of the address."},"state":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Pass this to specify the state or province of the address, helping to identify the region within the country."},"country":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":" Include this to provide country of the address, crucial for precise geocoding on a global scale."},"postalcode":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Use this to indicate the postal or ZIP code, aiding in pinpointing the exact area within a city or locality."},"format":{"type":"string","default":"xml","enum":["xml","json","xmlv1.1"],"examples":["json"],"description":"Output Format. Defaults to xml. \n\n> This version (v1) of our Reverse Geocoding API is compatible with OpenStreetMap's Nominatim Geocoder in both JSON & XML formats. However, all our enhancements such as additional datasets and algorithms are supported only in `json` or `xmlv1.1` format options.","$schema":"http://json-schema.org/draft-04/schema#"},"addressdetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a breakdown of the address of this result into elements. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"statecode":{"type":"integer","enum":[0,1],"default":0,"description":"Adds state or province code when available to the `state_code` key inside the `address` object. Currently supported for addresses in the USA, Canada and Australia. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"viewbox":{"type":"string","examples":["-73.9965012,40.7489255,-73.9858166,40.7499585"],"$schema":"http://json-schema.org/draft-04/schema#","description":"The preferred area to find search results. Any two corner points of the box - `max_lon,max_lat,min_lon,min_lat` or `min_lon,min_lat,max_lon,max_lat` - are accepted in any order as long as they span a real box. To restrict results to those within the viewbox, use along with the `bounded` option."},"bounded":{"type":"integer","enum":[0,1],"$schema":"http://json-schema.org/draft-04/schema#","description":"Restrict result to items contained within the bounds specified in the `viewbox` parameter. Defaults to `0`."},"limit":{"type":"integer","minimum":1,"maximum":50,"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit the number of returned results. Accepted value: `1` to `50`. Defaults to `10`."},"accept-language":{"type":"string","default":"en","examples":["en"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Preferred language order for showing search results, overrides the value specified in the `Accept-Language` HTTP header. Defaults to `en`. \n\nTo use native language for the response when available, use `accept-language=native`. \n\nEither uses standard <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\" target=\"_blank\">rfc2616 accept-language string</a> or a simple comma separated list of language codes."},"countrycodes":{"type":"string","examples":["us,ca,gb"],"$schema":"http://json-schema.org/draft-04/schema#","description":"Limit search results to a specific country or a comma-separated list of countries. Should be the ISO 3166-1 alpha-2 code(s)."},"normalizeaddress":{"type":"integer","enum":[0,1],"default":0,"description":"Makes parsing of the `address` object easier by returning a predictable and defined list of elements. Defaults to `0` for backward compatibility. We recommend setting this to `1` for new projects.\n\n  Element Name  | Description\n  ------------- | -----------\n  name          | House name or Point of Interest (POI) such as a Cafe or School\n  house_number  | House or Building number\n  road          | Roads, Highways, Freeways, Motorways\n  neighbourhood | Neighbourhoods, Allotments, Quarters, Communities\n  suburb        | Suburbs, Subdivisions\n  island        | Islands, Islets\n  city          | Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets\n  county        | Counties\n  state         | States, Provinces, Regions, State Districts\n  state_code    | State or Province Code\n  postcode      | Postal Codes, Zipcodes\n  country       | Countries, Nation-states\n  country_code  | Country Code - 2 letter (ISO 3166-1 alpha-2)","$schema":"http://json-schema.org/draft-04/schema#"},"normalizecity":{"type":"integer","enum":[0,1],"default":0,"description":"For responses with no `city` value in the address section, the next available element in this order - `city_district`, `locality`, `town`, `borough`, `municipality`, `village`, `hamlet`, `quarter`, `neighbourhood` - from the address section will be normalized to city. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"postaladdress":{"type":"integer","enum":[0,1],"default":0,"description":"Returns address inside the `postaladdress` key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"matchquality":{"type":"integer","enum":[0,1],"default":0,"description":"Returns additional information about quality of the result in a `matchquality` object. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"source":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"If this parameter is not specified, LocationIQ uses multiple public and proprietary datasets to return results. If you'd like to restrict results to only OpenStreetMap data, you can set the value of this parameter to `nom`. This will only query our internal cluster of Nominatim servers, and return results. We may still apply some post-processing steps to these results though, so results may vary from the official Nominatim instance."},"normalizeimportance":{"type":"integer","default":1,"enum":[0,1],"description":"When this parameter is absent or set to `1`, the `importance` value(s) in the API response is limited to the range of 0 to 1. Values outside this range are adjusted to the nearest boundary (0 or 1). Setting `normalizeimportance` to `0` allows the importance value to be lower or higher than the specified range of 0 to 1. Defaults to `1`","$schema":"http://json-schema.org/draft-04/schema#"},"dedupe":{"type":"integer","enum":[0,1],"default":1,"description":"Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Our Geocoder will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to `1`. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested.","$schema":"http://json-schema.org/draft-04/schema#"},"namedetails":{"type":"integer","enum":[0,1],"default":0,"description":"Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"extratags":{"type":"integer","enum":[0,1],"default":0,"description":"Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_geojson":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in geojson format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_kml":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in kml format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_svg":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results in svg format. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"polygon_text":{"type":"integer","enum":[0,1],"default":0,"description":"Output geometry of results as a WKT. Defaults to `0`.","$schema":"http://json-schema.org/draft-04/schema#"},"json_callback":{"type":"string","$schema":"http://json-schema.org/draft-04/schema#","description":"Wrap json output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats."}},"required":[]}]},"response":{"200":{"title":"location-forward-geocoding","x-stoplight":{"id":"360vfacsuwhfx"},"type":"array","items":{"type":"object","properties":{"place_id":{"type":"string","description":"Unique identifier for the place."},"licence":{"type":"string","description":"License information for the data."},"osm_type":{"type":"string","description":"Type of OpenStreetMap object."},"osm_id":{"type":"string","description":"Unique identifier for the OpenStreetMap object."},"lat":{"type":"string","description":"Latitude of the location."},"lon":{"type":"string","description":"Longitude of the location."},"display_name":{"type":"string","description":"Formatted address for display."},"class":{"type":"string","description":"The category of this result"},"type":{"type":"string","description":"The 'type' of the class/category of this result"},"importance":{"type":"number","description":"Calculated importance of this result compared to the search query the user has provided. Ranges between 0 and 1.","format":"float","minimum":-3.402823669209385e+38,"maximum":3.402823669209385e+38},"address":{"anyOf":[{"title":"address","type":"object","description":"Breakdown of the address into elements.\nAll these elements are optional and only those elements that are available for a given location will be returned.","properties":{"house_number":{"type":"string","description":"House number","examples":["3894"]},"road":{"type":"string","description":"Road name","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhood"},"hamlet":{"type":"string","description":"Hamlet"},"suburb":{"type":"string","description":"Suburb"},"village":{"type":"string","description":"Village name","examples":["Landen"]},"town":{"type":"string","description":"Town name"},"city_district":{"type":"string","description":"Administrative area between city level and town level"},"city":{"type":"string","description":"City name","examples":["Landen"]},"region":{"type":"string","description":"Region name"},"county":{"type":"string","description":"County name","examples":["Warren County"]},"state_district":{"type":"string","description":"District name"},"state":{"type":"string","description":"State name","examples":["Ohio"]},"state_code":{"type":"string","description":"State code","examples":["oh"]},"postcode":{"type":"string","description":"Postal code","examples":["45039"]},"country":{"type":"string","description":"Country name","examples":["United States of America"]},"country_code":{"type":"string","description":"Country code","examples":["us"]},"name":{"type":"string","description":"Name of the entity/road in the given location"},"water":{"type":"string","x-stoplight":{"id":"7nunw3epqpcqo"},"description":"The name of an ocean or sea, if the location falls within a body of water outside any country's administrative regions."}},"x-examples":{"Example 1":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Result from Ocean":{"house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","city":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","state_code":"oh"},"Example 2":{"name":"South Pacific Ocean","water":"South Pacific Ocean"}}},{"title":"address-normalized","x-stoplight":{"id":"q798lnglnqkb4"},"type":"object","description":"The default address section returns a wide range of elements - from common ones such as `road` and `country` to obscure ones such as `hamlet`, `cycleway`, `park`. This was done to maintain backward compatibility with OpenStreetMap's Nominatim. To make parsing easier for developers, the `normalizeaddress` parameter rolls up elements in the `address` section of the response to the list of elements defined below.\n","properties":{"name":{"type":"string","description":"House name or Point of Interest (POI)"},"house_number":{"type":"string","description":"House or Building number","examples":["3894"]},"road":{"type":"string","description":"Roads, Highways, Freeways, Motorways","examples":["Spring Mill Way"]},"neighbourhood":{"type":"string","description":"Neighbourhoods, Allotments, Quarters, Communities"},"suburb":{"type":"string","description":"Suburbs, Subdivisions"},"island":{"type":"string","description":"Islands, Islets"},"city":{"type":"string","description":"Cities, Towns, Villages, Municipalities, Districts, Boroughs, Hamlets","examples":["Landen"]},"county":{"type":"string","description":"Counties","examples":["Warren County"]},"state":{"type":"string","description":"States, Provinces, Regions, State Districts","examples":["Ohio"]},"state_code":{"type":"string","description":"State or Province Code","examples":["oh"]},"postcode":{"type":"string","description":"Postal Codes, Zipcodes","examples":["45039"]},"country":{"type":"string","description":"Countries, Nation-states","examples":["United States of America"]},"country_code":{"type":"string","description":"Country Code - 2 letter (ISO 3166-1 alpha-2)","examples":["us"]}},"x-examples":{"Example 1":{"name":"Empire State Building","house_number":"350","road":"5th Avenue","neighbourhood":"Manhattan Community Board 5","suburb":"Manhattan","city":"New York","county":"New York County","state":"New York","postcode":"10001","country":"United States of America","country_code":"us"},"Result from Ocean":{"name":"South Pacific Ocean"},"Example 2":{"name":"South Pacific Ocean"}}}]},"boundingbox":{"type":"array","description":"List of bounding box coordinates [min_lat, max_lat, min_lon, max_lon].","items":{"type":"string"}},"namedetails":{"type":"object","x-examples":{"Example 1":{"name":"Empire State Building","name:en":"Empire State Building","name:es":"Edificio Empire State","name:he":"בניין אמפייר סטייט","name:hi":"एम्पायर स्टेट बिल्डिंग","name:ko":"엠파이어 스테이트 빌딩","name:ru":"Эмпайр-Стейт-Билдинг","name:uk":"Емпайр-Стейт-Білдінг","name:zh":"帝国大厦"}},"properties":{"name":{"type":"string"}},"description":"The dictionary with full list of available names including ref etc. Returned when `namedetails=1` is set in the request.\n"},"extratags":{"type":"object","x-examples":{"Example 1":{"ele":"15","height":"443.2","wikidata":"Q9188","wikipedia":"en:Empire State Building","start_date":"1931","wheelchair":"yes","building:use":"office","opening_hours":"Mo-Su 08:00-02:00","building:levels":"102","construction_date":"1930-1931"}},"description":"The dictionary with additional useful tags like website or maxspeed. Returned when `extratags=1` is set in the request.\n","additionalProperties":true},"geojson":{"type":"object","properties":{"type":{"type":"string"},"coordinates":{"type":"array","items":{"type":"number"}}},"x-examples":{"Example 1":{"type":"Polygon","coordinates":[[[-73.9865012,40.748491],[-73.9851602,40.7479255],[-73.9848166,40.7483931],[-73.9861574,40.7489585],[-73.9863252,40.7487301],[-73.9863554,40.748689],[-73.9864839,40.7485145],[-73.9865012,40.748491]]]}},"description":"Output geometry of results in geojson format. Returned when `polygon_geojson=1` is set in the request."},"geokml":{"type":"string","x-examples":{"Example 1":"<Polygon><outerBoundaryIs><LinearRing><coordinates>-73.986501200000006,40.748491000000001 -73.985160199999996,40.747925500000001 -73.984816600000002,40.748393100000001 -73.986157399999996,40.748958500000001 -73.986325199999996,40.748730100000003 -73.986355399999994,40.748688999999999 -73.986483899999996,40.748514499999999 -73.986501200000006,40.748491000000001</coordinates></LinearRing></outerBoundaryIs></Polygon>"},"description":"Output geometry of results in kml format. Returned when `polygon_kml=1` is set in the request."},"svg":{"type":"string","x-examples":{"Example 1":"M -73.9865012 -40.748491 L -73.9851602 -40.7479255 -73.9848166 -40.7483931 -73.9861574 -40.7489585 -73.9863252 -40.7487301 -73.9863554 -40.748689 -73.9864839 -40.7485145 Z"},"description":"Output geometry of results in svg format. Returned when `polygon_svg=1` is set in the request."},"geotext":{"type":"string","x-examples":{"Example 1":"POLYGON((-73.9865012 40.748491,-73.9851602 40.7479255,-73.9848166 40.7483931,-73.9861574 40.7489585,-73.9863252 40.7487301,-73.9863554 40.748689,-73.9864839 40.7485145,-73.9865012 40.748491))"},"title":"","description":"Output geometry of results as a WKT. Returned when `polygon_text=1` is set in the request."},"icon":{"type":"string","x-stoplight":{"id":"udpck9wsvlgou"},"description":"The URL of an icon representing this result, if applicable."},"matchquality":{"type":"object","x-examples":{"Example 1":{"matchcode":"exact","matchtype":"point","matchlevel":"venue"}},"description":"An additional object `matchquality` for every result in the response, containing the following elements: `matchcode`, `matchtype`, `matchlevel`.","properties":{"matchcode":{"title":"matchcode","x-stoplight":{"id":"keiun4kwm07z4"},"type":"string","description":"Specifies the quality of the returned address.\n\n matchcode  | description\n ------------|---------------\n  exact      | The result matches the input query with a high level of probability.\n  fallback   | The result does not exactly match the input but is closely related to it provided there is direct a heierarchial relation.\n  approximate| The result matches the input query with a medium to low level of probability.\n"},"matchtype":{"title":"matchtype","x-stoplight":{"id":"20ejxqp1iy2wr"},"type":"string","description":"Specifies quality of the returned location match\n  \n  matchtype    | description\n --------------|---------------\n  point        | The coordinate returned is a point address, typically with rooftop accuracy.\n  centroid     | The coordinate returned is a centroid of a road or administrative boundary.\n  interpolated | The coordinate returned is a point determined by interpolation."},"matchlevel":{"type":"string","x-examples":{"Example 1":"venue"},"description":"Specifies the most granular address element that matches the geocoding query.\n\n matchlevel       | details\n -----------------|---------------\n  venue           | The returned address is of a Point of Interest (PoI) level.\n  building        | The returned address is of a house level.\n  street          | The returned address is on a street level.\n  neighbourhood   | The returned address is on a neighbourhood level.\n  island          | The returned address is on a island level.\n  borough         | The returned address is on a borough level.\n  city            | The returned address is on a city level.\n  county          | The returned address is on a county level.\n  state           | The returned address is on a state level.\n  country         | The returned address is on a country level.\n  marine          | The returned address is on a marine level.\n  postalcode      | The returned address is on a postalcode level."}}},"postaladdress":{"title":"postaladdress","x-stoplight":{"id":"zq4zgnef9uq9n"},"type":"string","description":"Returns address specifically formatted for each country. Returned when `postaladdress` is set in the request","x-examples":{"Example 1":"5, Avenue Anatole France, 75007, Paris, France"}}},"required":["place_id","licence","lat","lon","display_name","boundingbox"]},"description":"","x-examples":{"Example 1":[{"place_id":"223483692","licence":"© LocationIQ.com CC BY 4.0, Data © OpenStreetMap contributors, ODbL 1.0","osm_type":"way","osm_id":"19301621","boundingbox":["39.307405567782","39.307505567782","-84.292824851595","-84.292724851595"],"lat":"39.3074555677816","lon":"-84.2927748515948","display_name":"3894, Spring Mill Way, Hunter’s Point, Landen, Warren County, Ohio, 45039, United States of America","class":"place","type":"house","importance":0.62025,"address":{"name":"Empire State Building","house_number":"3894","road":"Spring Mill Way","residential":"Hunter’s Point","village":"Landen","county":"Warren County","state":"Ohio","postcode":"45039","country":"United States of America","country_code":"us","city":"Landen"}}]},"$schema":"http://json-schema.org/draft-04/schema#"},"400":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"401":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"403":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"404":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"429":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"},"500":{"title":"error","type":"object","properties":{"error":{"type":"string","examples":["Invalid key"]}},"$schema":"http://json-schema.org/draft-04/schema#"}}} as const
;
export { Autocomplete, Balance, Directions, GetTimezone, Lookup, Matching, Matrix, Nearby, Nearest, Optimize, Reverse, Search, SearchPostalcode, SearchStructured }
